// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: EIgZkKwUj_

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Progress from '../../Progress'; // plasmic-import: eQr-xX-Lwt/component
import Tiles1BannerImg from '../../Tiles1BannerImg'; // plasmic-import: BUOaf7HbR8/component
import Tile from '../../Tile'; // plasmic-import: 0Nks_r79nt/component
import ContinueBtn from '../../ContinueBtn'; // plasmic-import: pX4r0lYQLb/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicLayoutTiles.module.css'; // plasmic-import: EIgZkKwUj_/css

export type PlasmicLayoutTiles__VariantMembers = {};
export type PlasmicLayoutTiles__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayoutTiles__VariantsArgs;
export const PlasmicLayoutTiles__VariantProps = new Array<VariantPropType>();

export type PlasmicLayoutTiles__ArgsType = {
  bannerImg?: React.ReactNode;
  title?: React.ReactNode;
  tiles?: React.ReactNode;
  subtitle?: React.ReactNode;
  progress?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLayoutTiles__ArgsType;
export const PlasmicLayoutTiles__ArgProps = new Array<ArgPropType>(
  'bannerImg',
  'title',
  'tiles',
  'subtitle',
  'progress',
);

export type PlasmicLayoutTiles__OverridesType = {
  root?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  content?: p.Flex<'div'>;
  textWrapper?: p.Flex<'div'>;
  tilesWrapper?: p.Flex<'ul'>;
  continueBtn?: p.Flex<typeof ContinueBtn>;
};

export interface DefaultLayoutTilesProps {
  bannerImg?: React.ReactNode;
  title?: React.ReactNode;
  tiles?: React.ReactNode;
  subtitle?: React.ReactNode;
  progress?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLayoutTiles__RenderFunc(props: {
  variants: PlasmicLayoutTiles__VariantsArgs;
  args: PlasmicLayoutTiles__ArgsType;
  overrides: PlasmicLayoutTiles__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <div
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Progress
              className={classNames('__wab_instance', sty.progress__fKhE4)}
            />
          ),

          value: args.progress,
        })}
      </div>
      <div
        data-plasmic-name={'content'}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Tiles1BannerImg
              className={classNames(
                '__wab_instance',
                sty.tiles1BannerImg___7Hhoi,
              )}
            />
          ),

          value: args.bannerImg,
        })}
        <p.Stack
          as={'div'}
          data-plasmic-name={'textWrapper'}
          data-plasmic-override={overrides.textWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.textWrapper)}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              'Tell us a little about you so we can customize your price ',
            value: args.title,
            className: classNames(sty.slotTargetTitle),
          })}
          {p.renderPlasmicSlot({
            defaultContents: 'Select all that apply',
            value: args.subtitle,
            className: classNames(sty.slotTargetSubtitle),
          })}
        </p.Stack>
        <p.Stack
          as={'ul'}
          data-plasmic-name={'tilesWrapper'}
          data-plasmic-override={overrides.tilesWrapper}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.ul,
            sty.tilesWrapper,
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Tile
                  className={classNames('__wab_instance', sty.tile__vYhyN)}
                  text={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jv5Xh,
                      )}
                    >
                      {
                        'Now is tthe time for all good men to come to the aid of their country'
                      }
                    </div>
                  }
                />

                <Tile
                  className={classNames('__wab_instance', sty.tile__ns4It)}
                />

                <Tile
                  className={classNames('__wab_instance', sty.tile__zYmMu)}
                />

                <Tile
                  checked={true}
                  className={classNames('__wab_instance', sty.tile__q613H)}
                />
              </React.Fragment>
            ),
            value: args.tiles,
          })}
        </p.Stack>
      </div>
      <ContinueBtn
        data-plasmic-name={'continueBtn'}
        data-plasmic-override={overrides.continueBtn}
        className={classNames('__wab_instance', sty.continueBtn)}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'freeBox',
    'content',
    'textWrapper',
    'tilesWrapper',
    'continueBtn',
  ],
  freeBox: ['freeBox'],
  content: ['content', 'textWrapper', 'tilesWrapper'],
  textWrapper: ['textWrapper'],
  tilesWrapper: ['tilesWrapper'],
  continueBtn: ['continueBtn'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  freeBox: 'div';
  content: 'div';
  textWrapper: 'div';
  tilesWrapper: 'ul';
  continueBtn: typeof ContinueBtn;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayoutTiles__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayoutTiles__VariantsArgs;
    args?: PlasmicLayoutTiles__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayoutTiles__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLayoutTiles__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLayoutTiles__ArgProps,
          internalVariantPropNames: PlasmicLayoutTiles__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicLayoutTiles__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicLayoutTiles';
  } else {
    func.displayName = `PlasmicLayoutTiles.${nodeName}`;
  }
  return func;
}

export const PlasmicLayoutTiles = Object.assign(
  // Top-level PlasmicLayoutTiles renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent('freeBox'),
    content: makeNodeComponent('content'),
    textWrapper: makeNodeComponent('textWrapper'),
    tilesWrapper: makeNodeComponent('tilesWrapper'),
    continueBtn: makeNodeComponent('continueBtn'),

    // Metadata about props expected for PlasmicLayoutTiles
    internalVariantProps: PlasmicLayoutTiles__VariantProps,
    internalArgProps: PlasmicLayoutTiles__ArgProps,
  },
);

export default PlasmicLayoutTiles;
/* prettier-ignore-end */
