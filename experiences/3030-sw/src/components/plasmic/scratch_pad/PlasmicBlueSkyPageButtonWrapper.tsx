// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: HjUE_s_nkj

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import BlueSkyPageContent1 from '../../BlueSkyPageContent1'; // plasmic-import: xl-_9c6wX3/component
import Button from '../../Button'; // plasmic-import: qpNzjgPDkDg/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicBlueSkyPageButtonWrapper.module.css'; // plasmic-import: HjUE_s_nkj/css

import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: KDiJWss1GEk/icon
import Icon4Icon from './icons/PlasmicIcon__Icon4'; // plasmic-import: 9kInrZ6aajA/icon

export type PlasmicBlueSkyPageButtonWrapper__VariantMembers = {};
export type PlasmicBlueSkyPageButtonWrapper__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlueSkyPageButtonWrapper__VariantsArgs;
export const PlasmicBlueSkyPageButtonWrapper__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBlueSkyPageButtonWrapper__ArgsType = {};
type ArgPropType = keyof PlasmicBlueSkyPageButtonWrapper__ArgsType;
export const PlasmicBlueSkyPageButtonWrapper__ArgProps =
  new Array<ArgPropType>();

export type PlasmicBlueSkyPageButtonWrapper__OverridesType = {
  root?: p.Flex<'div'>;
  content?: p.Flex<'div'>;
  blueSkyPageContent1?: p.Flex<typeof BlueSkyPageContent1>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultBlueSkyPageButtonWrapperProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBlueSkyPageButtonWrapper__RenderFunc(props: {
  variants: PlasmicBlueSkyPageButtonWrapper__VariantsArgs;
  args: PlasmicBlueSkyPageButtonWrapper__ArgsType;
  overrides: PlasmicBlueSkyPageButtonWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <div
        data-plasmic-name={'content'}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      >
        <BlueSkyPageContent1
          data-plasmic-name={'blueSkyPageContent1'}
          data-plasmic-override={overrides.blueSkyPageContent1}
          className={classNames('__wab_instance', sty.blueSkyPageContent1)}
        />
      </div>
      <Button
        data-plasmic-name={'button'}
        data-plasmic-override={overrides.button}
        className={classNames('__wab_instance', sty.button)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'content', 'blueSkyPageContent1', 'button'],
  content: ['content', 'blueSkyPageContent1'],
  blueSkyPageContent1: ['blueSkyPageContent1'],
  button: ['button'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  content: 'div';
  blueSkyPageContent1: typeof BlueSkyPageContent1;
  button: typeof Button;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlueSkyPageButtonWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlueSkyPageButtonWrapper__VariantsArgs;
    args?: PlasmicBlueSkyPageButtonWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlueSkyPageButtonWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlueSkyPageButtonWrapper__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlueSkyPageButtonWrapper__ArgProps,
          internalVariantPropNames:
            PlasmicBlueSkyPageButtonWrapper__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicBlueSkyPageButtonWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicBlueSkyPageButtonWrapper';
  } else {
    func.displayName = `PlasmicBlueSkyPageButtonWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicBlueSkyPageButtonWrapper = Object.assign(
  // Top-level PlasmicBlueSkyPageButtonWrapper renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent('content'),
    blueSkyPageContent1: makeNodeComponent('blueSkyPageContent1'),
    button: makeNodeComponent('button'),

    // Metadata about props expected for PlasmicBlueSkyPageButtonWrapper
    internalVariantProps: PlasmicBlueSkyPageButtonWrapper__VariantProps,
    internalArgProps: PlasmicBlueSkyPageButtonWrapper__ArgProps,
  },
);

export default PlasmicBlueSkyPageButtonWrapper;
/* prettier-ignore-end */
