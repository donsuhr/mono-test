// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: TXgWzZ3jCo

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import BackBtn from '../../BackBtn'; // plasmic-import: wHca_GOFAh/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicCardDiy.module.css'; // plasmic-import: TXgWzZ3jCo/css

import GlyphStarReviewfilledIcon from './icons/PlasmicIcon__GlyphStarReviewfilled'; // plasmic-import: GCWqnNBcdX/icon
import WhiteBgIcon from './icons/PlasmicIcon__WhiteBg'; // plasmic-import: rtPI1Nu0gR9/icon
import Vector72Icon from './icons/PlasmicIcon__Vector72'; // plasmic-import: 4MutcVh76K8/icon
import Vector73Icon from './icons/PlasmicIcon__Vector73'; // plasmic-import: eJ_I2n_s1YZ/icon
import Group4Icon from './icons/PlasmicIcon__Group4'; // plasmic-import: 54Y0C9g82R0/icon
import Vector74Icon from './icons/PlasmicIcon__Vector74'; // plasmic-import: 6AuljDpamuw/icon
import Vector75Icon from './icons/PlasmicIcon__Vector75'; // plasmic-import: rbFLfzzoqQR/icon
import Fill1Icon from './icons/PlasmicIcon__Fill1'; // plasmic-import: 1HqcVshEAtG/icon
import Stroke2Icon from './icons/PlasmicIcon__Stroke2'; // plasmic-import: eamLbjFypCw/icon
import Fill3Icon from './icons/PlasmicIcon__Fill3'; // plasmic-import: QwxsDMKTFDR/icon
import Stroke4Icon from './icons/PlasmicIcon__Stroke4'; // plasmic-import: jXzSuJSNhZT/icon
import Fill5Icon from './icons/PlasmicIcon__Fill5'; // plasmic-import: mmlAy7e8TWF/icon
import Stroke6Icon from './icons/PlasmicIcon__Stroke6'; // plasmic-import: GpLUtJTnM/icon
import group5548Wgc3E9Gmlcs from './images/group5548.svg'; // plasmic-import: wgc3e9gmlcs/picture
import group20Xb0EGzwv7Q from './images/group20.svg'; // plasmic-import: XB0EGzwv7Q/picture
import icnMaximzeYourDeductionsAndCreditsLcDXdKi0Me from './images/icnMaximzeYourDeductionsAndCredits.svg'; // plasmic-import: lcDXdKI0Me/picture

export type PlasmicCardDiy__VariantMembers = {};
export type PlasmicCardDiy__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardDiy__VariantsArgs;
export const PlasmicCardDiy__VariantProps = new Array<VariantPropType>();

export type PlasmicCardDiy__ArgsType = {};
type ArgPropType = keyof PlasmicCardDiy__ArgsType;
export const PlasmicCardDiy__ArgProps = new Array<ArgPropType>();

export type PlasmicCardDiy__OverridesType = {
  root?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou?: p.Flex<'div'>;
  diyFinal?: p.Flex<'div'>;
  background?: p.Flex<'div'>;
  rectangle2029?: p.Flex<'div'>;
  elementsStarsDesktop?: p.Flex<'div'>;
  starsVertical?: p.Flex<'div'>;
  stars?: p.Flex<'div'>;
  numbers?: p.Flex<'div'>;
  spacingDesktopSpacingXxs?: p.Flex<'div'>;
  blockBackground?: p.Flex<'div'>;
  numbers2?: p.Flex<'div'>;
  spacingDesktopSpacingXxs2?: p.Flex<'div'>;
  blockBackground2?: p.Flex<'div'>;
  spacingDesktopSpacingXxs3?: p.Flex<'div'>;
  blockBackground3?: p.Flex<'div'>;
  _2500?: p.Flex<'div'>;
  topBorder?: p.Flex<'div'>;
  group5554?: p.Flex<'div'>;
  doItYourself?: p.Flex<'div'>;
  easyPrep?: p.Flex<'div'>;
  icnEfile?: p.Flex<'div'>;
  efileBolt?: p.Flex<'div'>;
  stocks?: p.Flex<'div'>;
  icnInvestmentIncome?: p.Flex<'div'>;
  icnInvestment?: p.Flex<'div'>;
  group?: p.Flex<'div'>;
  maxRefund?: p.Flex<'div'>;
  icnMaximzeYourDeductionsAndCredits?: p.Flex<'div'>;
  button?: p.Flex<'div'>;
  rectangle2064?: p.Flex<'div'>;
  price?: p.Flex<'div'>;
  group5458?: p.Flex<'div'>;
  backBtn?: p.Flex<typeof BackBtn>;
};

export interface DefaultCardDiyProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCardDiy__RenderFunc(props: {
  variants: PlasmicCardDiy__VariantsArgs;
  args: PlasmicCardDiy__ArgsType;
  overrides: PlasmicCardDiy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <p.Stack
        as={'div'}
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={
            'hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou'
          }
          data-plasmic-override={
            overrides.hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou
          }
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou,
          )}
        >
          {
            'Here you go!\nBased on your tax situation, this is the right option for you. '
          }
        </div>
        <div
          data-plasmic-name={'diyFinal'}
          data-plasmic-override={overrides.diyFinal}
          className={classNames(projectcss.all, sty.diyFinal)}
        >
          <div
            data-plasmic-name={'background'}
            data-plasmic-override={overrides.background}
            className={classNames(projectcss.all, sty.background)}
          >
            <div
              data-plasmic-name={'rectangle2029'}
              data-plasmic-override={overrides.rectangle2029}
              className={classNames(projectcss.all, sty.rectangle2029)}
            />
          </div>
          <div
            data-plasmic-name={'elementsStarsDesktop'}
            data-plasmic-override={overrides.elementsStarsDesktop}
            className={classNames(projectcss.all, sty.elementsStarsDesktop)}
          >
            <div
              data-plasmic-name={'starsVertical'}
              data-plasmic-override={overrides.starsVertical}
              className={classNames(projectcss.all, sty.starsVertical)}
            >
              <div
                data-plasmic-name={'stars'}
                data-plasmic-override={overrides.stars}
                className={classNames(projectcss.all, sty.stars)}
              >
                <GlyphStarReviewfilledIcon
                  className={classNames(projectcss.all, sty.svg__kufs7)}
                  role={'img'}
                />

                <GlyphStarReviewfilledIcon
                  className={classNames(projectcss.all, sty.svg___3Qjot)}
                  role={'img'}
                />

                <GlyphStarReviewfilledIcon
                  className={classNames(projectcss.all, sty.svg__eapz)}
                  role={'img'}
                />

                <GlyphStarReviewfilledIcon
                  className={classNames(projectcss.all, sty.svg__ro3K)}
                  role={'img'}
                />

                <GlyphStarReviewfilledIcon
                  className={classNames(projectcss.all, sty.svg__fsnQ)}
                  role={'img'}
                />
              </div>
              {false ? (
                <div
                  data-plasmic-name={'numbers'}
                  data-plasmic-override={overrides.numbers}
                  className={classNames(projectcss.all, sty.numbers)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___08S9I,
                    )}
                  >
                    {'5/5'}
                  </div>
                  <div
                    data-plasmic-name={'spacingDesktopSpacingXxs'}
                    data-plasmic-override={overrides.spacingDesktopSpacingXxs}
                    className={classNames(
                      projectcss.all,
                      sty.spacingDesktopSpacingXxs,
                    )}
                  >
                    <div
                      data-plasmic-name={'blockBackground'}
                      data-plasmic-override={overrides.blockBackground}
                      className={classNames(
                        projectcss.all,
                        sty.blockBackground,
                      )}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e0F2G,
                    )}
                  >
                    {'(2500)'}
                  </div>
                </div>
              ) : null}
            </div>
            <div
              data-plasmic-name={'numbers2'}
              data-plasmic-override={overrides.numbers2}
              className={classNames(projectcss.all, sty.numbers2)}
            >
              <div
                data-plasmic-name={'spacingDesktopSpacingXxs2'}
                data-plasmic-override={overrides.spacingDesktopSpacingXxs2}
                className={classNames(
                  projectcss.all,
                  sty.spacingDesktopSpacingXxs2,
                )}
              >
                <div
                  data-plasmic-name={'blockBackground2'}
                  data-plasmic-override={overrides.blockBackground2}
                  className={classNames(projectcss.all, sty.blockBackground2)}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tzwK6,
                )}
              >
                {'5/5'}
              </div>
              <div
                data-plasmic-name={'spacingDesktopSpacingXxs3'}
                data-plasmic-override={overrides.spacingDesktopSpacingXxs3}
                className={classNames(
                  projectcss.all,
                  sty.spacingDesktopSpacingXxs3,
                )}
              >
                <div
                  data-plasmic-name={'blockBackground3'}
                  data-plasmic-override={overrides.blockBackground3}
                  className={classNames(projectcss.all, sty.blockBackground3)}
                />
              </div>
              <div
                data-plasmic-name={'_2500'}
                data-plasmic-override={overrides._2500}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty._2500,
                )}
              >
                {'(2500 reviews)'}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={'topBorder'}
            data-plasmic-override={overrides.topBorder}
            className={classNames(projectcss.all, sty.topBorder)}
          />

          <div
            data-plasmic-name={'group5554'}
            data-plasmic-override={overrides.group5554}
            className={classNames(projectcss.all, sty.group5554)}
          >
            <div
              data-plasmic-name={'doItYourself'}
              data-plasmic-override={overrides.doItYourself}
              className={classNames(projectcss.all, sty.doItYourself)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___07BbZ,
                )}
              >
                {'Do it yourself'}
              </div>
            </div>
            <img
              alt={''}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__aAOj,
              )}
              src={group5548Wgc3E9Gmlcs}
            />
          </div>
          <div
            data-plasmic-name={'easyPrep'}
            data-plasmic-override={overrides.easyPrep}
            className={classNames(projectcss.all, sty.easyPrep)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2UNfi,
              )}
            >
              {'Easy prep, print, and e-file'}
            </div>
            <div
              data-plasmic-name={'icnEfile'}
              data-plasmic-override={overrides.icnEfile}
              className={classNames(projectcss.all, sty.icnEfile)}
            >
              <div
                data-plasmic-name={'efileBolt'}
                data-plasmic-override={overrides.efileBolt}
                className={classNames(projectcss.all, sty.efileBolt)}
              >
                <WhiteBgIcon
                  className={classNames(projectcss.all, sty.svg__zFQhQ)}
                  role={'img'}
                />

                <Vector72Icon
                  className={classNames(projectcss.all, sty.svg__u0Hcd)}
                  role={'img'}
                />

                <Vector73Icon
                  className={classNames(projectcss.all, sty.svg__dl1LG)}
                  role={'img'}
                />

                <Group4Icon
                  className={classNames(projectcss.all, sty.svg__qlj0X)}
                  role={'img'}
                />

                <Vector74Icon
                  className={classNames(projectcss.all, sty.svg___56A5B)}
                  role={'img'}
                />

                <Vector75Icon
                  className={classNames(projectcss.all, sty.svg__xa10B)}
                  role={'img'}
                />
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={'stocks'}
            data-plasmic-override={overrides.stocks}
            className={classNames(projectcss.all, sty.stocks)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jYtr4,
              )}
            >
              {'Covers stocks, bonds, ESPPs, and other investments'}
            </div>
            <div
              data-plasmic-name={'icnInvestmentIncome'}
              data-plasmic-override={overrides.icnInvestmentIncome}
              className={classNames(projectcss.all, sty.icnInvestmentIncome)}
            >
              <div
                data-plasmic-name={'icnInvestment'}
                data-plasmic-override={overrides.icnInvestment}
                className={classNames(projectcss.all, sty.icnInvestment)}
              >
                <div
                  data-plasmic-name={'group'}
                  data-plasmic-override={overrides.group}
                  className={classNames(projectcss.all, sty.group)}
                >
                  <Fill1Icon
                    className={classNames(projectcss.all, sty.svg__tUdYz)}
                    role={'img'}
                  />

                  <Stroke2Icon
                    className={classNames(projectcss.all, sty.svg__j9CLc)}
                    role={'img'}
                  />

                  <Fill3Icon
                    className={classNames(projectcss.all, sty.svg__le1Zl)}
                    role={'img'}
                  />

                  <Stroke4Icon
                    className={classNames(projectcss.all, sty.svg__gkpaV)}
                    role={'img'}
                  />

                  <Fill5Icon
                    className={classNames(projectcss.all, sty.svg__nSa3W)}
                    role={'img'}
                  />

                  <Stroke6Icon
                    className={classNames(projectcss.all, sty.svg__hebKo)}
                    role={'img'}
                  />

                  <img
                    alt={''}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__dsW8C,
                    )}
                    src={group20Xb0EGzwv7Q}
                  />
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={'maxRefund'}
            data-plasmic-override={overrides.maxRefund}
            className={classNames(projectcss.all, sty.maxRefund)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__axy2,
              )}
            >
              {'Maximum refund guarantee'}
            </div>
            <div
              data-plasmic-name={'icnMaximzeYourDeductionsAndCredits'}
              data-plasmic-override={
                overrides.icnMaximzeYourDeductionsAndCredits
              }
              className={classNames(
                projectcss.all,
                sty.icnMaximzeYourDeductionsAndCredits,
              )}
            >
              <img
                alt={''}
                className={classNames(
                  projectcss.all,
                  projectcss.img,
                  sty.img__qj1QW,
                )}
                src={icnMaximzeYourDeductionsAndCreditsLcDXdKi0Me}
              />
            </div>
          </div>
          <div
            data-plasmic-name={'button'}
            data-plasmic-override={overrides.button}
            className={classNames(projectcss.all, sty.button)}
          >
            <div
              data-plasmic-name={'rectangle2064'}
              data-plasmic-override={overrides.rectangle2064}
              className={classNames(projectcss.all, sty.rectangle2064)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8FOsc,
              )}
            >
              {'Start for free\nPay only when you file'}
            </div>
          </div>
          <div
            data-plasmic-name={'price'}
            data-plasmic-override={overrides.price}
            className={classNames(projectcss.all, sty.price)}
          >
            <div
              data-plasmic-name={'group5458'}
              data-plasmic-override={overrides.group5458}
              className={classNames(projectcss.all, sty.group5458)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oW9Ky,
                )}
              >
                {'$90'}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eyYlj,
                )}
              >
                {'State additional\nSee cost breakdown'}
              </div>
            </div>
          </div>
        </div>
        <BackBtn
          data-plasmic-name={'backBtn'}
          data-plasmic-override={overrides.backBtn}
          className={classNames('__wab_instance', sty.backBtn)}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'freeBox',
    'hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou',
    'diyFinal',
    'background',
    'rectangle2029',
    'elementsStarsDesktop',
    'starsVertical',
    'stars',
    'numbers',
    'spacingDesktopSpacingXxs',
    'blockBackground',
    'numbers2',
    'spacingDesktopSpacingXxs2',
    'blockBackground2',
    'spacingDesktopSpacingXxs3',
    'blockBackground3',
    '_2500',
    'topBorder',
    'group5554',
    'doItYourself',
    'easyPrep',
    'icnEfile',
    'efileBolt',
    'stocks',
    'icnInvestmentIncome',
    'icnInvestment',
    'group',
    'maxRefund',
    'icnMaximzeYourDeductionsAndCredits',
    'button',
    'rectangle2064',
    'price',
    'group5458',
    'backBtn',
  ],
  freeBox: [
    'freeBox',
    'hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou',
    'diyFinal',
    'background',
    'rectangle2029',
    'elementsStarsDesktop',
    'starsVertical',
    'stars',
    'numbers',
    'spacingDesktopSpacingXxs',
    'blockBackground',
    'numbers2',
    'spacingDesktopSpacingXxs2',
    'blockBackground2',
    'spacingDesktopSpacingXxs3',
    'blockBackground3',
    '_2500',
    'topBorder',
    'group5554',
    'doItYourself',
    'easyPrep',
    'icnEfile',
    'efileBolt',
    'stocks',
    'icnInvestmentIncome',
    'icnInvestment',
    'group',
    'maxRefund',
    'icnMaximzeYourDeductionsAndCredits',
    'button',
    'rectangle2064',
    'price',
    'group5458',
    'backBtn',
  ],
  hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou: [
    'hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou',
  ],
  diyFinal: [
    'diyFinal',
    'background',
    'rectangle2029',
    'elementsStarsDesktop',
    'starsVertical',
    'stars',
    'numbers',
    'spacingDesktopSpacingXxs',
    'blockBackground',
    'numbers2',
    'spacingDesktopSpacingXxs2',
    'blockBackground2',
    'spacingDesktopSpacingXxs3',
    'blockBackground3',
    '_2500',
    'topBorder',
    'group5554',
    'doItYourself',
    'easyPrep',
    'icnEfile',
    'efileBolt',
    'stocks',
    'icnInvestmentIncome',
    'icnInvestment',
    'group',
    'maxRefund',
    'icnMaximzeYourDeductionsAndCredits',
    'button',
    'rectangle2064',
    'price',
    'group5458',
  ],
  background: ['background', 'rectangle2029'],
  rectangle2029: ['rectangle2029'],
  elementsStarsDesktop: [
    'elementsStarsDesktop',
    'starsVertical',
    'stars',
    'numbers',
    'spacingDesktopSpacingXxs',
    'blockBackground',
    'numbers2',
    'spacingDesktopSpacingXxs2',
    'blockBackground2',
    'spacingDesktopSpacingXxs3',
    'blockBackground3',
    '_2500',
  ],
  starsVertical: [
    'starsVertical',
    'stars',
    'numbers',
    'spacingDesktopSpacingXxs',
    'blockBackground',
  ],
  stars: ['stars'],
  numbers: ['numbers', 'spacingDesktopSpacingXxs', 'blockBackground'],
  spacingDesktopSpacingXxs: ['spacingDesktopSpacingXxs', 'blockBackground'],
  blockBackground: ['blockBackground'],
  numbers2: [
    'numbers2',
    'spacingDesktopSpacingXxs2',
    'blockBackground2',
    'spacingDesktopSpacingXxs3',
    'blockBackground3',
    '_2500',
  ],
  spacingDesktopSpacingXxs2: ['spacingDesktopSpacingXxs2', 'blockBackground2'],
  blockBackground2: ['blockBackground2'],
  spacingDesktopSpacingXxs3: ['spacingDesktopSpacingXxs3', 'blockBackground3'],
  blockBackground3: ['blockBackground3'],
  _2500: ['_2500'],
  topBorder: ['topBorder'],
  group5554: ['group5554', 'doItYourself'],
  doItYourself: ['doItYourself'],
  easyPrep: ['easyPrep', 'icnEfile', 'efileBolt'],
  icnEfile: ['icnEfile', 'efileBolt'],
  efileBolt: ['efileBolt'],
  stocks: ['stocks', 'icnInvestmentIncome', 'icnInvestment', 'group'],
  icnInvestmentIncome: ['icnInvestmentIncome', 'icnInvestment', 'group'],
  icnInvestment: ['icnInvestment', 'group'],
  group: ['group'],
  maxRefund: ['maxRefund', 'icnMaximzeYourDeductionsAndCredits'],
  icnMaximzeYourDeductionsAndCredits: ['icnMaximzeYourDeductionsAndCredits'],
  button: ['button', 'rectangle2064'],
  rectangle2064: ['rectangle2064'],
  price: ['price', 'group5458'],
  group5458: ['group5458'],
  backBtn: ['backBtn'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  freeBox: 'div';
  hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou: 'div';
  diyFinal: 'div';
  background: 'div';
  rectangle2029: 'div';
  elementsStarsDesktop: 'div';
  starsVertical: 'div';
  stars: 'div';
  numbers: 'div';
  spacingDesktopSpacingXxs: 'div';
  blockBackground: 'div';
  numbers2: 'div';
  spacingDesktopSpacingXxs2: 'div';
  blockBackground2: 'div';
  spacingDesktopSpacingXxs3: 'div';
  blockBackground3: 'div';
  _2500: 'div';
  topBorder: 'div';
  group5554: 'div';
  doItYourself: 'div';
  easyPrep: 'div';
  icnEfile: 'div';
  efileBolt: 'div';
  stocks: 'div';
  icnInvestmentIncome: 'div';
  icnInvestment: 'div';
  group: 'div';
  maxRefund: 'div';
  icnMaximzeYourDeductionsAndCredits: 'div';
  button: 'div';
  rectangle2064: 'div';
  price: 'div';
  group5458: 'div';
  backBtn: typeof BackBtn;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardDiy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardDiy__VariantsArgs;
    args?: PlasmicCardDiy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardDiy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardDiy__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardDiy__ArgProps,
          internalVariantPropNames: PlasmicCardDiy__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicCardDiy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicCardDiy';
  } else {
    func.displayName = `PlasmicCardDiy.${nodeName}`;
  }
  return func;
}

export const PlasmicCardDiy = Object.assign(
  // Top-level PlasmicCardDiy renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent('freeBox'),
    hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou:
      makeNodeComponent(
        'hereYouGoBasedOnYourTaxSituationThisIsTheRightOptionForYou',
      ),
    diyFinal: makeNodeComponent('diyFinal'),
    background: makeNodeComponent('background'),
    rectangle2029: makeNodeComponent('rectangle2029'),
    elementsStarsDesktop: makeNodeComponent('elementsStarsDesktop'),
    starsVertical: makeNodeComponent('starsVertical'),
    stars: makeNodeComponent('stars'),
    numbers: makeNodeComponent('numbers'),
    spacingDesktopSpacingXxs: makeNodeComponent('spacingDesktopSpacingXxs'),
    blockBackground: makeNodeComponent('blockBackground'),
    numbers2: makeNodeComponent('numbers2'),
    spacingDesktopSpacingXxs2: makeNodeComponent('spacingDesktopSpacingXxs2'),
    blockBackground2: makeNodeComponent('blockBackground2'),
    spacingDesktopSpacingXxs3: makeNodeComponent('spacingDesktopSpacingXxs3'),
    blockBackground3: makeNodeComponent('blockBackground3'),
    _2500: makeNodeComponent('_2500'),
    topBorder: makeNodeComponent('topBorder'),
    group5554: makeNodeComponent('group5554'),
    doItYourself: makeNodeComponent('doItYourself'),
    easyPrep: makeNodeComponent('easyPrep'),
    icnEfile: makeNodeComponent('icnEfile'),
    efileBolt: makeNodeComponent('efileBolt'),
    stocks: makeNodeComponent('stocks'),
    icnInvestmentIncome: makeNodeComponent('icnInvestmentIncome'),
    icnInvestment: makeNodeComponent('icnInvestment'),
    group: makeNodeComponent('group'),
    maxRefund: makeNodeComponent('maxRefund'),
    icnMaximzeYourDeductionsAndCredits: makeNodeComponent(
      'icnMaximzeYourDeductionsAndCredits',
    ),
    button: makeNodeComponent('button'),
    rectangle2064: makeNodeComponent('rectangle2064'),
    price: makeNodeComponent('price'),
    group5458: makeNodeComponent('group5458'),
    backBtn: makeNodeComponent('backBtn'),

    // Metadata about props expected for PlasmicCardDiy
    internalVariantProps: PlasmicCardDiy__VariantProps,
    internalArgProps: PlasmicCardDiy__ArgProps,
  },
);

export default PlasmicCardDiy;
/* prettier-ignore-end */
