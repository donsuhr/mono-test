// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: HgfmiJUGrHu

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicTiles3BannerImg.module.css'; // plasmic-import: HgfmiJUGrHu/css

import Ellipse605Icon from './icons/PlasmicIcon__Ellipse605'; // plasmic-import: VDvSxJSxchNT/icon
import FloorIcon from './icons/PlasmicIcon__Floor'; // plasmic-import: 5R9ixk_0L3/icon
import BgLineIcon from './icons/PlasmicIcon__BgLine'; // plasmic-import: raBocKIvo-/icon
import PlantIcon from './icons/PlasmicIcon__Plant'; // plasmic-import: 8m_O54FhD9/icon
import HeelsIcon from './icons/PlasmicIcon__Heels'; // plasmic-import: PjeaQ_Px8A/icon
import HairIcon from './icons/PlasmicIcon__Hair'; // plasmic-import: 6Dud0UUtLM/icon
import Vector48Icon from './icons/PlasmicIcon__Vector48'; // plasmic-import: hECEyytobkI/icon
import Vector49Icon from './icons/PlasmicIcon__Vector49'; // plasmic-import: oEp8Is_HkP7/icon
import Vector50Icon from './icons/PlasmicIcon__Vector50'; // plasmic-import: 2Ty4RuW-Quh/icon
import Vector51Icon from './icons/PlasmicIcon__Vector51'; // plasmic-import: kzCXXYQP4i8/icon
import Vector52Icon from './icons/PlasmicIcon__Vector52'; // plasmic-import: ml4WToofni6/icon
import Vector53Icon from './icons/PlasmicIcon__Vector53'; // plasmic-import: d4Xgdr6KSvp/icon
import Vector54Icon from './icons/PlasmicIcon__Vector54'; // plasmic-import: 8vJet8aJmPl/icon
import Vector55Icon from './icons/PlasmicIcon__Vector55'; // plasmic-import: GVFkGHFRbI_/icon
import Vector56Icon from './icons/PlasmicIcon__Vector56'; // plasmic-import: uM_rdHOkAY8/icon
import Vector57Icon from './icons/PlasmicIcon__Vector57'; // plasmic-import: JqfJjvaUJMZ/icon
import Vector58Icon from './icons/PlasmicIcon__Vector58'; // plasmic-import: ynzndYbzHPm/icon
import Vector59Icon from './icons/PlasmicIcon__Vector59'; // plasmic-import: fj_qA3f43dV/icon
import Vector60Icon from './icons/PlasmicIcon__Vector60'; // plasmic-import: WhZfZ-uLeKx/icon
import Vector62Icon from './icons/PlasmicIcon__Vector62'; // plasmic-import: nZOKqytCz/icon
import Vector63Icon from './icons/PlasmicIcon__Vector63'; // plasmic-import: zAVzIMLF1V/icon
import Vector64Icon from './icons/PlasmicIcon__Vector64'; // plasmic-import: wAblYhqQVq/icon
import Vector65Icon from './icons/PlasmicIcon__Vector65'; // plasmic-import: 9jkLdzX65F/icon
import Vector66Icon from './icons/PlasmicIcon__Vector66'; // plasmic-import: O5yozaEX4k/icon
import Vector68Icon from './icons/PlasmicIcon__Vector68'; // plasmic-import: SPmiIhcXAyx/icon
import Vector69Icon from './icons/PlasmicIcon__Vector69'; // plasmic-import: E-UKDo2lNib/icon
import Vector70Icon from './icons/PlasmicIcon__Vector70'; // plasmic-import: JPKPmszsgcb/icon
import Vector71Icon from './icons/PlasmicIcon__Vector71'; // plasmic-import: 029HepCJr49/icon
import maskGroup5K1CeCvGvZDd from './images/maskGroup5.svg'; // plasmic-import: K1CECvGvZDd/picture
import vector61ZbPth0Mmgys from './images/vector61.svg'; // plasmic-import: ZbPth0MMGYS/picture
import vector67QLiGF99M from './images/vector67.svg'; // plasmic-import: Q-LiG-f99M/picture

export type PlasmicTiles3BannerImg__VariantMembers = {};
export type PlasmicTiles3BannerImg__VariantsArgs = {};
type VariantPropType = keyof PlasmicTiles3BannerImg__VariantsArgs;
export const PlasmicTiles3BannerImg__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTiles3BannerImg__ArgsType = {};
type ArgPropType = keyof PlasmicTiles3BannerImg__ArgsType;
export const PlasmicTiles3BannerImg__ArgProps = new Array<ArgPropType>();

export type PlasmicTiles3BannerImg__OverridesType = {
  root?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  easyImports2?: p.Flex<'div'>;
  lady?: p.Flex<'div'>;
  frame5?: p.Flex<'div'>;
  phone?: p.Flex<'div'>;
  text?: p.Flex<'div'>;
};

export interface DefaultTiles3BannerImgProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTiles3BannerImg__RenderFunc(props: {
  variants: PlasmicTiles3BannerImg__VariantsArgs;
  args: PlasmicTiles3BannerImg__ArgsType;
  overrides: PlasmicTiles3BannerImg__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <div
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={'easyImports2'}
          data-plasmic-override={overrides.easyImports2}
          className={classNames(projectcss.all, sty.easyImports2)}
        >
          <Ellipse605Icon
            className={classNames(projectcss.all, sty.svg__dmbol)}
            role={'img'}
          />

          <FloorIcon
            className={classNames(projectcss.all, sty.svg__tThw)}
            role={'img'}
          />

          <BgLineIcon
            className={classNames(projectcss.all, sty.svg__rvBr2)}
            role={'img'}
          />

          <PlantIcon
            className={classNames(projectcss.all, sty.svg___76EtG)}
            role={'img'}
          />

          <div
            data-plasmic-name={'lady'}
            data-plasmic-override={overrides.lady}
            className={classNames(projectcss.all, sty.lady)}
          >
            <HeelsIcon
              className={classNames(projectcss.all, sty.svg__tVgaL)}
              role={'img'}
            />

            <HairIcon
              className={classNames(projectcss.all, sty.svg__dNyMf)}
              role={'img'}
            />

            <Vector48Icon
              className={classNames(projectcss.all, sty.svg___7Ky2M)}
              role={'img'}
            />

            <Vector49Icon
              className={classNames(projectcss.all, sty.svg___8MbSv)}
              role={'img'}
            />

            <Vector50Icon
              className={classNames(projectcss.all, sty.svg__mwCl2)}
              role={'img'}
            />

            <img
              alt={''}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__fuak,
              )}
              src={maskGroup5K1CeCvGvZDd}
            />

            <div
              data-plasmic-name={'frame5'}
              data-plasmic-override={overrides.frame5}
              className={classNames(projectcss.all, sty.frame5)}
            />

            <Vector51Icon
              className={classNames(projectcss.all, sty.svg__yApIl)}
              role={'img'}
            />

            <Vector52Icon
              className={classNames(projectcss.all, sty.svg__hyTut)}
              role={'img'}
            />

            <Vector53Icon
              className={classNames(projectcss.all, sty.svg__p6AL)}
              role={'img'}
            />

            <Vector54Icon
              className={classNames(projectcss.all, sty.svg__dpV90)}
              role={'img'}
            />

            <Vector55Icon
              className={classNames(projectcss.all, sty.svg__zjD6E)}
              role={'img'}
            />

            <Vector56Icon
              className={classNames(projectcss.all, sty.svg___8BI2A)}
              role={'img'}
            />

            <Vector57Icon
              className={classNames(projectcss.all, sty.svg__ix6Bc)}
              role={'img'}
            />

            <Vector58Icon
              className={classNames(projectcss.all, sty.svg___9DzMi)}
              role={'img'}
            />

            <Vector59Icon
              className={classNames(projectcss.all, sty.svg__yTvbJ)}
              role={'img'}
            />

            <Vector60Icon
              className={classNames(projectcss.all, sty.svg__hA67)}
              role={'img'}
            />
          </div>
          <div
            data-plasmic-name={'phone'}
            data-plasmic-override={overrides.phone}
            className={classNames(projectcss.all, sty.phone)}
          >
            <img
              alt={''}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__d1Wiy,
              )}
              src={vector61ZbPth0Mmgys}
            />

            <Vector62Icon
              className={classNames(projectcss.all, sty.svg__hMtoR)}
              role={'img'}
            />

            <Vector63Icon
              className={classNames(projectcss.all, sty.svg___3JLPq)}
              role={'img'}
            />

            <Vector64Icon
              className={classNames(projectcss.all, sty.svg__q8CsH)}
              role={'img'}
            />

            <Vector65Icon
              className={classNames(projectcss.all, sty.svg__lmceD)}
              role={'img'}
            />

            <Vector66Icon
              className={classNames(projectcss.all, sty.svg__eyser)}
              role={'img'}
            />

            <img
              alt={''}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__zNxI2,
              )}
              src={vector67QLiGF99M}
            />

            <div
              data-plasmic-name={'text'}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
              )}
            >
              {'W-2'}
            </div>
            <Vector68Icon
              className={classNames(projectcss.all, sty.svg__qujnb)}
              role={'img'}
            />

            <Vector68Icon
              className={classNames(projectcss.all, sty.svg__f7Ioa)}
              role={'img'}
            />

            <Vector69Icon
              className={classNames(projectcss.all, sty.svg__b75NU)}
              role={'img'}
            />

            <Vector69Icon
              className={classNames(projectcss.all, sty.svg__bEny)}
              role={'img'}
            />

            <Vector70Icon
              className={classNames(projectcss.all, sty.svg__mLuHd)}
              role={'img'}
            />

            <Vector69Icon
              className={classNames(projectcss.all, sty.svg__zvj7P)}
              role={'img'}
            />

            <Vector69Icon
              className={classNames(projectcss.all, sty.svg__tjOt)}
              role={'img'}
            />

            <Vector71Icon
              className={classNames(projectcss.all, sty.svg__hiN8N)}
              role={'img'}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'freeBox', 'easyImports2', 'lady', 'frame5', 'phone', 'text'],
  freeBox: ['freeBox', 'easyImports2', 'lady', 'frame5', 'phone', 'text'],
  easyImports2: ['easyImports2', 'lady', 'frame5', 'phone', 'text'],
  lady: ['lady', 'frame5'],
  frame5: ['frame5'],
  phone: ['phone', 'text'],
  text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  freeBox: 'div';
  easyImports2: 'div';
  lady: 'div';
  frame5: 'div';
  phone: 'div';
  text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTiles3BannerImg__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTiles3BannerImg__VariantsArgs;
    args?: PlasmicTiles3BannerImg__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTiles3BannerImg__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTiles3BannerImg__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTiles3BannerImg__ArgProps,
          internalVariantPropNames: PlasmicTiles3BannerImg__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicTiles3BannerImg__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTiles3BannerImg';
  } else {
    func.displayName = `PlasmicTiles3BannerImg.${nodeName}`;
  }
  return func;
}

export const PlasmicTiles3BannerImg = Object.assign(
  // Top-level PlasmicTiles3BannerImg renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent('freeBox'),
    easyImports2: makeNodeComponent('easyImports2'),
    lady: makeNodeComponent('lady'),
    frame5: makeNodeComponent('frame5'),
    phone: makeNodeComponent('phone'),
    text: makeNodeComponent('text'),

    // Metadata about props expected for PlasmicTiles3BannerImg
    internalVariantProps: PlasmicTiles3BannerImg__VariantProps,
    internalArgProps: PlasmicTiles3BannerImg__ArgProps,
  },
);

export default PlasmicTiles3BannerImg;
/* prettier-ignore-end */
