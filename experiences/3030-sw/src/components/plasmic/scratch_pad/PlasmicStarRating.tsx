// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: Zxy9c3vI8HI

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicStarRating.module.css'; // plasmic-import: Zxy9c3vI8HI/css

import StarIcon from './icons/PlasmicIcon__Star'; // plasmic-import: 7d7N-WyfIoW/icon

export type PlasmicStarRating__VariantMembers = {
  justify: 'left' | 'center';
  align: 'row' | 'rowWhite' | 'inline';
  color: 'white';
};
export type PlasmicStarRating__VariantsArgs = {
  justify?: SingleChoiceArg<'left' | 'center'>;
  align?: SingleChoiceArg<'row' | 'rowWhite' | 'inline'>;
  color?: SingleChoiceArg<'white'>;
};
type VariantPropType = keyof PlasmicStarRating__VariantsArgs;
export const PlasmicStarRating__VariantProps = new Array<VariantPropType>(
  'justify',
  'align',
  'color',
);

export type PlasmicStarRating__ArgsType = {
  text?: React.ReactNode;
  disclaimerText?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStarRating__ArgsType;
export const PlasmicStarRating__ArgProps = new Array<ArgPropType>(
  'text',
  'disclaimerText',
);

export type PlasmicStarRating__OverridesType = {
  root?: p.Flex<'button'>;
  starWrapper?: p.Flex<'div'>;
  baseStarWrapper?: p.Flex<'div'>;
  colorStarWrapper?: p.Flex<'div'>;
  textWrapper?: p.Flex<'div'>;
  text?: p.Flex<'div'>;
};

export interface DefaultStarRatingProps {
  text?: React.ReactNode;
  disclaimerText?: React.ReactNode;
  justify?: SingleChoiceArg<'left' | 'center'>;
  align?: SingleChoiceArg<'row' | 'rowWhite' | 'inline'>;
  color?: SingleChoiceArg<'white'>;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicStarRating__RenderFunc(props: {
  variants: PlasmicStarRating__VariantsArgs;
  args: PlasmicStarRating__ArgsType;
  overrides: PlasmicStarRating__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'justify',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.justify
          : undefined,
      },
      {
        path: 'align',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.align
          : undefined,
      },
      {
        path: 'color',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.color
          : undefined,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={'button'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootalign_inline]: hasVariant($state, 'align', 'inline'),
          [sty.rootalign_inline_justify_center]:
            hasVariant($state, 'align', 'inline') &&
            hasVariant($state, 'justify', 'center'),
          [sty.rootalign_rowWhite]: hasVariant($state, 'align', 'rowWhite'),
          [sty.rootalign_row]: hasVariant($state, 'align', 'row'),
          [sty.rootcolor_white_align_inline]:
            hasVariant($state, 'align', 'inline') &&
            hasVariant($state, 'color', 'white'),
          [sty.rootcolor_white_align_inline_justify_center]:
            hasVariant($state, 'justify', 'center') &&
            hasVariant($state, 'align', 'inline') &&
            hasVariant($state, 'color', 'white'),
          [sty.rootjustify_center]: hasVariant($state, 'justify', 'center'),
          [sty.rootjustify_left]: hasVariant($state, 'justify', 'left'),
        },
      )}
    >
      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__r2Wuv, {
          [sty.freeBoxalign_inline__r2WuvjY3R]: hasVariant(
            $state,
            'align',
            'inline',
          ),
          [sty.freeBoxalign_rowWhite__r2Wuv2IzeS]: hasVariant(
            $state,
            'align',
            'rowWhite',
          ),
          [sty.freeBoxalign_row__r2Wuv6Daa0]: hasVariant(
            $state,
            'align',
            'row',
          ),
          [sty.freeBoxjustify_center__r2WuvnLDjI]: hasVariant(
            $state,
            'justify',
            'center',
          ),
          [sty.freeBoxjustify_left__r2WuvuumQ4]: hasVariant(
            $state,
            'justify',
            'left',
          ),
        })}
      >
        <div
          data-plasmic-name={'starWrapper'}
          data-plasmic-override={overrides.starWrapper}
          className={classNames(projectcss.all, sty.starWrapper, {
            [sty.starWrapperalign_rowWhite]: hasVariant(
              $state,
              'align',
              'rowWhite',
            ),
            [sty.starWrapperalign_row]: hasVariant($state, 'align', 'row'),
            [sty.starWrapperjustify_left]: hasVariant(
              $state,
              'justify',
              'left',
            ),
          })}
        >
          <p.Stack
            as={'div'}
            data-plasmic-name={'baseStarWrapper'}
            data-plasmic-override={overrides.baseStarWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.baseStarWrapper, {
              [sty.baseStarWrapperalign_row]: hasVariant(
                $state,
                'align',
                'row',
              ),
              [sty.baseStarWrapperjustify_left]: hasVariant(
                $state,
                'justify',
                'left',
              ),
            })}
          >
            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__psTgd)}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__vzBd7)}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__auuIg, {
                [sty.svgalign_inline__auuIGjY3R]: hasVariant(
                  $state,
                  'align',
                  'inline',
                ),
              })}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__mEcLz, {
                [sty.svgalign_inline__mEcLZjY3R]: hasVariant(
                  $state,
                  'align',
                  'inline',
                ),
              })}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__c27Lh, {
                [sty.svgalign_row__c27Lh6Daa0]: hasVariant(
                  $state,
                  'align',
                  'row',
                ),
              })}
              role={'img'}
            />
          </p.Stack>
          <p.Stack
            as={'div'}
            data-plasmic-name={'colorStarWrapper'}
            data-plasmic-override={overrides.colorStarWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.colorStarWrapper, {
              [sty.colorStarWrapperalign_row]: hasVariant(
                $state,
                'align',
                'row',
              ),
              [sty.colorStarWrapperjustify_center]: hasVariant(
                $state,
                'justify',
                'center',
              ),
              [sty.colorStarWrapperjustify_left]: hasVariant(
                $state,
                'justify',
                'left',
              ),
            })}
          >
            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__sqW0I, {
                [sty.svgalign_inline__sqW0IjY3R]: hasVariant(
                  $state,
                  'align',
                  'inline',
                ),
                [sty.svgalign_rowWhite__sqW0I2IzeS]: hasVariant(
                  $state,
                  'align',
                  'rowWhite',
                ),
              })}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__ftbrU, {
                [sty.svgalign_rowWhite__ftbrU2IzeS]: hasVariant(
                  $state,
                  'align',
                  'rowWhite',
                ),
                [sty.svgjustify_center__ftbrUnLDjI]: hasVariant(
                  $state,
                  'justify',
                  'center',
                ),
              })}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__owCnk)}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__k9IsA)}
              role={'img'}
            />

            <StarIcon
              aria-hidden={'true' as const}
              className={classNames(projectcss.all, sty.svg__bMnay)}
              role={'img'}
            />
          </p.Stack>
        </div>
        <div
          data-plasmic-name={'textWrapper'}
          data-plasmic-override={overrides.textWrapper}
          className={classNames(projectcss.all, sty.textWrapper, {
            [sty.textWrapperalign_rowWhite]: hasVariant(
              $state,
              'align',
              'rowWhite',
            ),
            [sty.textWrapperalign_row]: hasVariant($state, 'align', 'row'),
            [sty.textWrapperjustify_left]: hasVariant(
              $state,
              'justify',
              'left',
            ),
          })}
        >
          {true
            ? p.renderPlasmicSlot({
                defaultContents: 'text',
                value: args.text,
                className: classNames(sty.slotTargetText, {
                  [sty.slotTargetTextalign_rowWhite]: hasVariant(
                    $state,
                    'align',
                    'rowWhite',
                  ),
                  [sty.slotTargetTextalign_row]: hasVariant(
                    $state,
                    'align',
                    'row',
                  ),
                  [sty.slotTargetTextcolor_white]: hasVariant(
                    $state,
                    'color',
                    'white',
                  ),
                  [sty.slotTargetTextjustify_left]: hasVariant(
                    $state,
                    'justify',
                    'left',
                  ),
                }),
              })
            : null}
        </div>
      </p.Stack>
      <div
        className={classNames(projectcss.all, sty.freeBox__rrdFq, {
          [sty.freeBoxalign_inline__rrdFqjY3R]: hasVariant(
            $state,
            'align',
            'inline',
          ),
          [sty.freeBoxalign_rowWhite__rrdFq2IzeS]: hasVariant(
            $state,
            'align',
            'rowWhite',
          ),
          [sty.freeBoxalign_row__rrdFq6Daa0]: hasVariant(
            $state,
            'align',
            'row',
          ),
          [sty.freeBoxcolor_white_align_inline__rrdFq1W2NzJY3R]:
            hasVariant($state, 'align', 'inline') &&
            hasVariant($state, 'color', 'white'),
          [sty.freeBoxjustify_left__rrdFquumQ4]: hasVariant(
            $state,
            'justify',
            'left',
          ),
        })}
      >
        {(hasVariant($state, 'align', 'rowWhite') ? true : true)
          ? p.renderPlasmicSlot({
              defaultContents: 'Star ratings are from 20XX',
              value: args.disclaimerText,
              className: classNames(sty.slotTargetDisclaimerText, {
                [sty.slotTargetDisclaimerTextalign_inline]: hasVariant(
                  $state,
                  'align',
                  'inline',
                ),
                [sty.slotTargetDisclaimerTextalign_rowWhite]: hasVariant(
                  $state,
                  'align',
                  'rowWhite',
                ),
                [sty.slotTargetDisclaimerTextalign_row]: hasVariant(
                  $state,
                  'align',
                  'row',
                ),
                [sty.slotTargetDisclaimerTextcolor_white]: hasVariant(
                  $state,
                  'color',
                  'white',
                ),
                [sty.slotTargetDisclaimerTextcolor_white_align_inline]:
                  hasVariant($state, 'align', 'inline') &&
                  hasVariant($state, 'color', 'white'),
                [sty.slotTargetDisclaimerTextcolor_white_align_inline_justify_center]:
                  hasVariant($state, 'justify', 'center') &&
                  hasVariant($state, 'align', 'inline') &&
                  hasVariant($state, 'color', 'white'),
                [sty.slotTargetDisclaimerTextjustify_center]: hasVariant(
                  $state,
                  'justify',
                  'center',
                ),
                [sty.slotTargetDisclaimerTextjustify_left]: hasVariant(
                  $state,
                  'justify',
                  'left',
                ),
              }),
            })
          : null}
        {(
          hasVariant($state, 'align', 'inline') &&
          hasVariant($state, 'color', 'white')
            ? true
            : hasVariant($state, 'align', 'rowWhite')
            ? true
            : false
        ) ? (
          <div
            data-plasmic-name={'text'}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textalign_inline]: hasVariant($state, 'align', 'inline'),
                [sty.textalign_rowWhite]: hasVariant(
                  $state,
                  'align',
                  'rowWhite',
                ),
                [sty.textcolor_white_align_inline]:
                  hasVariant($state, 'align', 'inline') &&
                  hasVariant($state, 'color', 'white'),
              },
            )}
          >
            {hasVariant($state, 'align', 'rowWhite')
              ? 'Star ratings are from 2021'
              : 'Enter some text'}
          </div>
        ) : null}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'starWrapper',
    'baseStarWrapper',
    'colorStarWrapper',
    'textWrapper',
    'text',
  ],
  starWrapper: ['starWrapper', 'baseStarWrapper', 'colorStarWrapper'],
  baseStarWrapper: ['baseStarWrapper'],
  colorStarWrapper: ['colorStarWrapper'],
  textWrapper: ['textWrapper'],
  text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'button';
  starWrapper: 'div';
  baseStarWrapper: 'div';
  colorStarWrapper: 'div';
  textWrapper: 'div';
  text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStarRating__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStarRating__VariantsArgs;
    args?: PlasmicStarRating__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStarRating__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStarRating__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicStarRating__ArgProps,
          internalVariantPropNames: PlasmicStarRating__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicStarRating__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicStarRating';
  } else {
    func.displayName = `PlasmicStarRating.${nodeName}`;
  }
  return func;
}

export const PlasmicStarRating = Object.assign(
  // Top-level PlasmicStarRating renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    starWrapper: makeNodeComponent('starWrapper'),
    baseStarWrapper: makeNodeComponent('baseStarWrapper'),
    colorStarWrapper: makeNodeComponent('colorStarWrapper'),
    textWrapper: makeNodeComponent('textWrapper'),
    text: makeNodeComponent('text'),

    // Metadata about props expected for PlasmicStarRating
    internalVariantProps: PlasmicStarRating__VariantProps,
    internalArgProps: PlasmicStarRating__ArgProps,
  },
);

export default PlasmicStarRating;
/* prettier-ignore-end */
