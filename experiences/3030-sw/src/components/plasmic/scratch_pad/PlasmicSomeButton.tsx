// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: ffbnmODdiu

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import W2 from '../../W2'; // plasmic-import: 5s-JvrYMxR/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicSomeButton.module.css'; // plasmic-import: ffbnmODdiu/css

import icnOwnBusinessBrL2OfMXf from './images/icnOwnBusiness.svg'; // plasmic-import: br-L2OfMXf/picture

export type PlasmicSomeButton__VariantMembers = {
  icon: 'w2' | '_1099' | 'ownbiz';
};
export type PlasmicSomeButton__VariantsArgs = {
  icon?: SingleChoiceArg<'w2' | '_1099' | 'ownbiz'>;
};
type VariantPropType = keyof PlasmicSomeButton__VariantsArgs;
export const PlasmicSomeButton__VariantProps = new Array<VariantPropType>(
  'icon',
);

export type PlasmicSomeButton__ArgsType = {};
type ArgPropType = keyof PlasmicSomeButton__ArgsType;
export const PlasmicSomeButton__ArgProps = new Array<ArgPropType>();

export type PlasmicSomeButton__OverridesType = {
  root?: p.Flex<'button'>;
  w2?: p.Flex<typeof W2>;
  img?: p.Flex<'img'>;
  choiceLabel?: p.Flex<'div'>;
  icnChair?: p.Flex<'div'>;
};

export interface DefaultSomeButtonProps {
  icon?: SingleChoiceArg<'w2' | '_1099' | 'ownbiz'>;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSomeButton__RenderFunc(props: {
  variants: PlasmicSomeButton__VariantsArgs;
  args: PlasmicSomeButton__ArgsType;
  overrides: PlasmicSomeButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'icon',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.icon,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={'button'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rooticon__1099]: hasVariant($state, 'icon', '_1099'),
          [sty.rooticon_ownbiz]: hasVariant($state, 'icon', 'ownbiz'),
          [sty.rooticon_w2]: hasVariant($state, 'icon', 'w2'),
        },
      )}
    >
      {(hasVariant($state, 'icon', 'ownbiz') ? true : true) ? (
        <W2
          data-plasmic-name={'w2'}
          data-plasmic-override={overrides.w2}
          className={classNames('__wab_instance', sty.w2, {
            [sty.w2icon__1099]: hasVariant($state, 'icon', '_1099'),
            [sty.w2icon_ownbiz]: hasVariant($state, 'icon', 'ownbiz'),
            [sty.w2icon_w2]: hasVariant($state, 'icon', 'w2'),
          })}
          icon={
            hasVariant($state, 'icon', '_1099') ? ('_1099' as const) : undefined
          }
        />
      ) : null}
      {(hasVariant($state, 'icon', 'ownbiz') ? true : false) ? (
        <img
          data-plasmic-name={'img'}
          data-plasmic-override={overrides.img}
          alt={''}
          className={classNames(projectcss.all, projectcss.img, sty.img, {
            [sty.imgicon_ownbiz]: hasVariant($state, 'icon', 'ownbiz'),
          })}
          src={icnOwnBusinessBrL2OfMXf}
        />
      ) : null}
      <div
        data-plasmic-name={'choiceLabel'}
        data-plasmic-override={overrides.choiceLabel}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.choiceLabel,
          {
            [sty.choiceLabelicon__1099]: hasVariant($state, 'icon', '_1099'),
            [sty.choiceLabelicon_ownbiz]: hasVariant($state, 'icon', 'ownbiz'),
          },
        )}
      >
        {hasVariant($state, 'icon', 'ownbiz')
          ? 'I own a business'
          : hasVariant($state, 'icon', '_1099')
          ? 'Iâ€™ve got some 1099s'
          : 'I had a job (W-2)'}
      </div>
      {(hasVariant($state, 'icon', 'ownbiz') ? true : false) ? (
        <div
          data-plasmic-name={'icnChair'}
          data-plasmic-override={overrides.icnChair}
          className={classNames(projectcss.all, sty.icnChair, {
            [sty.icnChairicon_ownbiz]: hasVariant($state, 'icon', 'ownbiz'),
          })}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'w2', 'img', 'choiceLabel', 'icnChair'],
  w2: ['w2'],
  img: ['img'],
  choiceLabel: ['choiceLabel'],
  icnChair: ['icnChair'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'button';
  w2: typeof W2;
  img: 'img';
  choiceLabel: 'div';
  icnChair: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSomeButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSomeButton__VariantsArgs;
    args?: PlasmicSomeButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSomeButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSomeButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSomeButton__ArgProps,
          internalVariantPropNames: PlasmicSomeButton__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicSomeButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSomeButton';
  } else {
    func.displayName = `PlasmicSomeButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSomeButton = Object.assign(
  // Top-level PlasmicSomeButton renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    w2: makeNodeComponent('w2'),
    img: makeNodeComponent('img'),
    choiceLabel: makeNodeComponent('choiceLabel'),
    icnChair: makeNodeComponent('icnChair'),

    // Metadata about props expected for PlasmicSomeButton
    internalVariantProps: PlasmicSomeButton__VariantProps,
    internalArgProps: PlasmicSomeButton__ArgProps,
  },
);

export default PlasmicSomeButton;
/* prettier-ignore-end */
