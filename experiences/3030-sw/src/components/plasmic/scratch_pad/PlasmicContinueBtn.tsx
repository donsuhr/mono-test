// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: pX4r0lYQLb

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicContinueBtn.module.css'; // plasmic-import: pX4r0lYQLb/css

import ChevronRightIcon from './icons/PlasmicIcon__ChevronRight'; // plasmic-import: 66Lqz4cg95/icon

export type PlasmicContinueBtn__VariantMembers = {};
export type PlasmicContinueBtn__VariantsArgs = {};
type VariantPropType = keyof PlasmicContinueBtn__VariantsArgs;
export const PlasmicContinueBtn__VariantProps = new Array<VariantPropType>();

export type PlasmicContinueBtn__ArgsType = {};
type ArgPropType = keyof PlasmicContinueBtn__ArgsType;
export const PlasmicContinueBtn__ArgProps = new Array<ArgPropType>();

export type PlasmicContinueBtn__OverridesType = {
  root?: p.Flex<'button'>;
  text?: p.Flex<'div'>;
  svg?: p.Flex<'svg'>;
};

export interface DefaultContinueBtnProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicContinueBtn__RenderFunc(props: {
  variants: PlasmicContinueBtn__VariantsArgs;
  args: PlasmicContinueBtn__ArgsType;
  overrides: PlasmicContinueBtn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <button
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <div
        data-plasmic-name={'text'}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {'Continue'}
      </div>
      <ChevronRightIcon
        data-plasmic-name={'svg'}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={'img'}
      />
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'text', 'svg'],
  text: ['text'],
  svg: ['svg'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'button';
  text: 'div';
  svg: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContinueBtn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContinueBtn__VariantsArgs;
    args?: PlasmicContinueBtn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContinueBtn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContinueBtn__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContinueBtn__ArgProps,
          internalVariantPropNames: PlasmicContinueBtn__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicContinueBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicContinueBtn';
  } else {
    func.displayName = `PlasmicContinueBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicContinueBtn = Object.assign(
  // Top-level PlasmicContinueBtn renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent('text'),
    svg: makeNodeComponent('svg'),

    // Metadata about props expected for PlasmicContinueBtn
    internalVariantProps: PlasmicContinueBtn__VariantProps,
    internalArgProps: PlasmicContinueBtn__ArgProps,
  },
);

export default PlasmicContinueBtn;
/* prettier-ignore-end */
