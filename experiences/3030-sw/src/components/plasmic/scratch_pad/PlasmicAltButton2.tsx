// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: 0cmBqk0qQx

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicAltButton2.module.css'; // plasmic-import: 0cmBqk0qQx/css

export type PlasmicAltButton2__VariantMembers = {};
export type PlasmicAltButton2__VariantsArgs = {};
type VariantPropType = keyof PlasmicAltButton2__VariantsArgs;
export const PlasmicAltButton2__VariantProps = new Array<VariantPropType>();

export type PlasmicAltButton2__ArgsType = {};
type ArgPropType = keyof PlasmicAltButton2__ArgsType;
export const PlasmicAltButton2__ArgProps = new Array<ArgPropType>();

export type PlasmicAltButton2__OverridesType = {
  root?: p.Flex<'button'>;
  green?: p.Flex<'div'>;
  grey?: p.Flex<'div'>;
  buttonLabel?: p.Flex<'div'>;
};

export interface DefaultAltButton2Props {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAltButton2__RenderFunc(props: {
  variants: PlasmicAltButton2__VariantsArgs;
  args: PlasmicAltButton2__ArgsType;
  overrides: PlasmicAltButton2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <p.Stack
        as={'button'}
        data-plasmic-name={'root'}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.button,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
        )}
      >
        <div
          data-plasmic-name={'green'}
          data-plasmic-override={overrides.green}
          className={classNames(projectcss.all, sty.green)}
        >
          <div
            data-plasmic-name={'grey'}
            data-plasmic-override={overrides.grey}
            className={classNames(projectcss.all, sty.grey)}
          >
            <div
              data-plasmic-name={'buttonLabel'}
              data-plasmic-override={overrides.buttonLabel}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.buttonLabel,
              )}
            >
              {'OK, letâ€™s go!'}
            </div>
          </div>
        </div>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'green', 'grey', 'buttonLabel'],
  green: ['green', 'grey', 'buttonLabel'],
  grey: ['grey', 'buttonLabel'],
  buttonLabel: ['buttonLabel'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'button';
  green: 'div';
  grey: 'div';
  buttonLabel: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAltButton2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAltButton2__VariantsArgs;
    args?: PlasmicAltButton2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAltButton2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAltButton2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAltButton2__ArgProps,
          internalVariantPropNames: PlasmicAltButton2__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicAltButton2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicAltButton2';
  } else {
    func.displayName = `PlasmicAltButton2.${nodeName}`;
  }
  return func;
}

export const PlasmicAltButton2 = Object.assign(
  // Top-level PlasmicAltButton2 renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    green: makeNodeComponent('green'),
    grey: makeNodeComponent('grey'),
    buttonLabel: makeNodeComponent('buttonLabel'),

    // Metadata about props expected for PlasmicAltButton2
    internalVariantProps: PlasmicAltButton2__VariantProps,
    internalArgProps: PlasmicAltButton2__ArgProps,
  },
);

export default PlasmicAltButton2;
/* prettier-ignore-end */
