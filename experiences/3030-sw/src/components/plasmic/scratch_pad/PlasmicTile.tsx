// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: 0Nks_r79nt

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicTile.module.css'; // plasmic-import: 0Nks_r79nt/css

import CheckmarkIcon from './icons/PlasmicIcon__Checkmark'; // plasmic-import: bqrx6qicpv/icon

export type PlasmicTile__VariantMembers = {
  checked: 'checked';
};
export type PlasmicTile__VariantsArgs = {
  checked?: SingleBooleanChoiceArg<'checked'>;
};
type VariantPropType = keyof PlasmicTile__VariantsArgs;
export const PlasmicTile__VariantProps = new Array<VariantPropType>('checked');

export type PlasmicTile__ArgsType = {
  text?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTile__ArgsType;
export const PlasmicTile__ArgProps = new Array<ArgPropType>('text');

export type PlasmicTile__OverridesType = {
  root?: p.Flex<'button'>;
  filter?: p.Flex<'div'>;
  green?: p.Flex<'div'>;
  bg?: p.Flex<'div'>;
  svg?: p.Flex<'svg'>;
};

export interface DefaultTileProps {
  text?: React.ReactNode;
  checked?: SingleBooleanChoiceArg<'checked'>;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTile__RenderFunc(props: {
  variants: PlasmicTile__VariantsArgs;
  args: PlasmicTile__ArgsType;
  overrides: PlasmicTile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'checked',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.checked,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <button
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <p.Stack
        as={'div'}
        data-plasmic-name={'filter'}
        data-plasmic-override={overrides.filter}
        hasGap={true}
        className={classNames(projectcss.all, sty.filter)}
      >
        <div
          data-plasmic-name={'green'}
          data-plasmic-override={overrides.green}
          className={classNames(projectcss.all, sty.green)}
        >
          <div
            data-plasmic-name={'bg'}
            data-plasmic-override={overrides.bg}
            className={classNames(projectcss.all, sty.bg, {
              [sty.bgchecked]: hasVariant($state, 'checked', 'checked'),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Stds,
                  )}
                >
                  {'I have a job (received W-2)'}
                </div>
              ),
              value: args.text,
              className: classNames(sty.slotTargetText, {
                [sty.slotTargetTextchecked]: hasVariant(
                  $state,
                  'checked',
                  'checked',
                ),
              }),
            })}
            {(hasVariant($state, 'checked', 'checked') ? true : true) ? (
              <CheckmarkIcon
                data-plasmic-name={'svg'}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg, {
                  [sty.svgchecked]: hasVariant($state, 'checked', 'checked'),
                })}
                role={'img'}
              />
            ) : null}
          </div>
        </div>
      </p.Stack>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'filter', 'green', 'bg', 'svg'],
  filter: ['filter', 'green', 'bg', 'svg'],
  green: ['green', 'bg', 'svg'],
  bg: ['bg', 'svg'],
  svg: ['svg'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'button';
  filter: 'div';
  green: 'div';
  bg: 'div';
  svg: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTile__VariantsArgs;
    args?: PlasmicTile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTile__ArgProps,
          internalVariantPropNames: PlasmicTile__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTile';
  } else {
    func.displayName = `PlasmicTile.${nodeName}`;
  }
  return func;
}

export const PlasmicTile = Object.assign(
  // Top-level PlasmicTile renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    filter: makeNodeComponent('filter'),
    green: makeNodeComponent('green'),
    bg: makeNodeComponent('bg'),
    svg: makeNodeComponent('svg'),

    // Metadata about props expected for PlasmicTile
    internalVariantProps: PlasmicTile__VariantProps,
    internalArgProps: PlasmicTile__ArgProps,
  },
);

export default PlasmicTile;
/* prettier-ignore-end */
