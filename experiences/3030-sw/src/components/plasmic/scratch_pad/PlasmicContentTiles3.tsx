// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: qGr5PbHXhCl

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import LayoutTiles from '../../LayoutTiles'; // plasmic-import: EIgZkKwUj_/component
import Progress from '../../Progress'; // plasmic-import: eQr-xX-Lwt/component
import Tiles3BannerImg from '../../Tiles3BannerImg'; // plasmic-import: HgfmiJUGrHu/component
import Tile from '../../Tile'; // plasmic-import: 0Nks_r79nt/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicContentTiles3.module.css'; // plasmic-import: qGr5PbHXhCl/css

export type PlasmicContentTiles3__VariantMembers = {};
export type PlasmicContentTiles3__VariantsArgs = {};
type VariantPropType = keyof PlasmicContentTiles3__VariantsArgs;
export const PlasmicContentTiles3__VariantProps = new Array<VariantPropType>();

export type PlasmicContentTiles3__ArgsType = {};
type ArgPropType = keyof PlasmicContentTiles3__ArgsType;
export const PlasmicContentTiles3__ArgProps = new Array<ArgPropType>();

export type PlasmicContentTiles3__OverridesType = {
  root?: p.Flex<'div'>;
  layoutTiles?: p.Flex<typeof LayoutTiles>;
  progress?: p.Flex<typeof Progress>;
  tiles3BannerImg?: p.Flex<typeof Tiles3BannerImg>;
  text?: p.Flex<'div'>;
};

export interface DefaultContentTiles3Props {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicContentTiles3__RenderFunc(props: {
  variants: PlasmicContentTiles3__VariantsArgs;
  args: PlasmicContentTiles3__ArgsType;
  overrides: PlasmicContentTiles3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <LayoutTiles
        data-plasmic-name={'layoutTiles'}
        data-plasmic-override={overrides.layoutTiles}
        bannerImg={
          <Tiles3BannerImg
            data-plasmic-name={'tiles3BannerImg'}
            data-plasmic-override={overrides.tiles3BannerImg}
            className={classNames('__wab_instance', sty.tiles3BannerImg)}
          />
        }
        className={classNames('__wab_instance', sty.layoutTiles)}
        progress={
          <Progress
            data-plasmic-name={'progress'}
            data-plasmic-override={overrides.progress}
            className={classNames('__wab_instance', sty.progress)}
            step={'_3' as const}
          />
        }
        tiles={
          <React.Fragment>
            <Tile
              className={classNames('__wab_instance', sty.tile__glhRg)}
              text={
                <div
                  data-plasmic-name={'text'}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text,
                  )}
                >
                  {
                    'Now is tthe time for all good men to come to the aid of their country'
                  }
                </div>
              }
            />

            <Tile
              checked={true}
              className={classNames('__wab_instance', sty.tile__wx3Og)}
            />

            <Tile className={classNames('__wab_instance', sty.tile__jcoW)} />

            <Tile
              checked={true}
              className={classNames('__wab_instance', sty.tile__bzLyb)}
            />
          </React.Fragment>
        }
        title={'Got it. How about any of these?'}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'layoutTiles', 'progress', 'tiles3BannerImg', 'text'],
  layoutTiles: ['layoutTiles', 'progress', 'tiles3BannerImg', 'text'],
  progress: ['progress'],
  tiles3BannerImg: ['tiles3BannerImg'],
  text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  layoutTiles: typeof LayoutTiles;
  progress: typeof Progress;
  tiles3BannerImg: typeof Tiles3BannerImg;
  text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentTiles3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentTiles3__VariantsArgs;
    args?: PlasmicContentTiles3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContentTiles3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContentTiles3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContentTiles3__ArgProps,
          internalVariantPropNames: PlasmicContentTiles3__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicContentTiles3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicContentTiles3';
  } else {
    func.displayName = `PlasmicContentTiles3.${nodeName}`;
  }
  return func;
}

export const PlasmicContentTiles3 = Object.assign(
  // Top-level PlasmicContentTiles3 renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    layoutTiles: makeNodeComponent('layoutTiles'),
    progress: makeNodeComponent('progress'),
    tiles3BannerImg: makeNodeComponent('tiles3BannerImg'),
    text: makeNodeComponent('text'),

    // Metadata about props expected for PlasmicContentTiles3
    internalVariantProps: PlasmicContentTiles3__VariantProps,
    internalArgProps: PlasmicContentTiles3__ArgProps,
  },
);

export default PlasmicContentTiles3;
/* prettier-ignore-end */
