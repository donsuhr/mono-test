// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: 0RxMaRob-Ed

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import ScrollToFaqFooterLink from '../../ScrollToFaqFooterLink'; // plasmic-import: p545QK4r4Kh/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicProductItemDetail.module.css'; // plasmic-import: 0RxMaRob-Ed/css

export type PlasmicProductItemDetail__VariantMembers = {
  productFamily: 'ttl' | 'diy' | 'fs';
};
export type PlasmicProductItemDetail__VariantsArgs = {
  productFamily?: MultiChoiceArg<'ttl' | 'diy' | 'fs'>;
};
type VariantPropType = keyof PlasmicProductItemDetail__VariantsArgs;
export const PlasmicProductItemDetail__VariantProps =
  new Array<VariantPropType>('productFamily');

export type PlasmicProductItemDetail__ArgsType = {
  faqButtonMobile?: React.ReactNode;
  faqButtonStationary?: React.ReactNode;
};
type ArgPropType = keyof PlasmicProductItemDetail__ArgsType;
export const PlasmicProductItemDetail__ArgProps = new Array<ArgPropType>(
  'faqButtonMobile',
  'faqButtonStationary',
);

export type PlasmicProductItemDetail__OverridesType = {
  root?: p.Flex<'div'>;
  assistedRecoCard?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  item1?: p.Flex<'div'>;
  item2?: p.Flex<'div'>;
  item3?: p.Flex<'div'>;
  item4?: p.Flex<'div'>;
  item5?: p.Flex<'div'>;
  faqLinks?: p.Flex<'div'>;
  faqMw?: p.Flex<'div'>;
  faqSw?: p.Flex<'div'>;
};

export interface DefaultProductItemDetailProps {
  faqButtonMobile?: React.ReactNode;
  faqButtonStationary?: React.ReactNode;
  productFamily?: MultiChoiceArg<'ttl' | 'diy' | 'fs'>;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProductItemDetail__RenderFunc(props: {
  variants: PlasmicProductItemDetail__VariantsArgs;
  args: PlasmicProductItemDetail__ArgsType;
  overrides: PlasmicProductItemDetail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'productFamily',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.productFamily
          : undefined,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootproductFamily_diy]: hasVariant(
            $state,
            'productFamily',
            'diy',
          ),
          [sty.rootproductFamily_fs]: hasVariant($state, 'productFamily', 'fs'),
          [sty.rootproductFamily_ttl]: hasVariant(
            $state,
            'productFamily',
            'ttl',
          ),
        },
      )}
    >
      <p.Stack
        as={'div'}
        data-plasmic-name={'assistedRecoCard'}
        data-plasmic-override={overrides.assistedRecoCard}
        hasGap={true}
        className={classNames(projectcss.all, sty.assistedRecoCard, {
          [sty.assistedRecoCardproductFamily_diy]: hasVariant(
            $state,
            'productFamily',
            'diy',
          ),
          [sty.assistedRecoCardproductFamily_fs]: hasVariant(
            $state,
            'productFamily',
            'fs',
          ),
          [sty.assistedRecoCardproductFamily_ttl]: hasVariant(
            $state,
            'productFamily',
            'ttl',
          ),
        })}
      >
        <div
          data-plasmic-name={'freeBox'}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxproductFamily_ttl]: hasVariant(
              $state,
              'productFamily',
              'ttl',
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cNTx,
              {
                [sty.textproductFamily_diy__cNTxYtOXu]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.textproductFamily_fs__cNTxj4H1]: hasVariant(
                  $state,
                  'productFamily',
                  'fs',
                ),
                [sty.textproductFamily_ttl__cNTXw4VrD]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              },
            )}
          >
            {hasVariant($state, 'productFamily', 'diy')
              ? 'Taxes made simple, with guidance at every step'
              : hasVariant($state, 'productFamily', 'ttl')
              ? 'Expert help, when you need it'
              : 'Have your own tax expert prepare, sign and file your taxes for you'}
          </div>
        </div>
        <p.Stack
          as={'div'}
          data-plasmic-name={'item1'}
          data-plasmic-override={overrides.item1}
          hasGap={true}
          className={classNames(projectcss.all, sty.item1, {
            [sty.item1productFamily_ttl]: hasVariant(
              $state,
              'productFamily',
              'ttl',
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dCg1X,
              {
                [sty.textproductFamily_diy__dCg1XYtOXu]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.textproductFamily_ttl__dCg1Xw4VrD]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              },
            )}
          >
            {hasVariant($state, 'productFamily', 'diy')
              ? '1 ANSWER SIMPLE QUESTIONS ABOUT YOUR LIFE'
              : hasVariant($state, 'productFamily', 'ttl')
              ? '1 LIVE HELP AS YOU DO YOUR TAXES'
              : '1 GET MATCHED WITH AN EXPERT'}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5VShs,
              {
                [sty.textproductFamily_diy___5VShsYtOXu]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.textproductFamily_ttl___5VShsw4VrD]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              },
            )}
          >
            {hasVariant($state, 'productFamily', 'diy')
              ? "Tell us about your life, your job, and your family, and we'll do all the math."
              : hasVariant($state, 'productFamily', 'ttl')
              ? 'Our experts are there when you need them, Just select the Live Help button to connect with a live tax expert.'
              : 'Securely share your documents so we can match you with the right tax expert.'}
          </div>
        </p.Stack>
        <p.Stack
          as={'div'}
          data-plasmic-name={'item2'}
          data-plasmic-override={overrides.item2}
          hasGap={true}
          className={classNames(projectcss.all, sty.item2, {
            [sty.item2productFamily_ttl]: hasVariant(
              $state,
              'productFamily',
              'ttl',
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wgGej,
              {
                [sty.textproductFamily_diy__wgGejYtOXu]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.textproductFamily_ttl__wgGejw4VrD]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              },
            )}
          >
            {hasVariant($state, 'productFamily', 'diy')
              ? '2 UPLOAD YOUR W-2 IN A SNAP'
              : hasVariant($state, 'productFamily', 'ttl')
              ? '2 AN EXPERT REVIEW BEFORE YOU FILE'
              : '2 YOUR EXPERT DOes ALL THE WORK'}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qNqK,
              {
                [sty.textproductFamily_diy__qNqKYtOXu]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.textproductFamily_ttl__qNqKw4VrD]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              },
            )}
          >
            {hasVariant($state, 'productFamily', 'diy')
              ? 'Take a picture of your W-2 and watch it securely upload into all the right tax forms.'
              : hasVariant($state, 'productFamily', 'ttl')
              ? 'Have a tax expert review your return so you can file with 100% confidence.'
              : 'Your expert will prepare your return from start to finish and keep you posted along the way.'}
          </div>
        </p.Stack>
        <p.Stack
          as={'div'}
          data-plasmic-name={'item3'}
          data-plasmic-override={overrides.item3}
          hasGap={true}
          className={classNames(projectcss.all, sty.item3, {
            [sty.item3productFamily_fs]: hasVariant(
              $state,
              'productFamily',
              'fs',
            ),
            [sty.item3productFamily_ttl]: hasVariant(
              $state,
              'productFamily',
              'ttl',
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zn9YO,
              {
                [sty.textproductFamily_diy__zn9YOYtOXu]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.textproductFamily_ttl__zn9YOw4VrD]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              },
            )}
          >
            {hasVariant($state, 'productFamily', 'diy')
              ? '3 YOUR SATISFACTION IS GUARANTEED'
              : hasVariant($state, 'productFamily', 'ttl')
              ? '3 EXPERT APPROVED GUARANTEE'
              : '3 review your return'}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zE37,
              {
                [sty.textproductFamily_diy__zE37YtOXu]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.textproductFamily_ttl__zE37W4VrD]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              },
            )}
          >
            {hasVariant($state, 'productFamily', 'diy')
              ? "Pay only when you're satisfied and ready to file, and get your maimum refund, guaranteed."
              : hasVariant($state, 'productFamily', 'ttl')
              ? 'Our tax experts will guarantee your taxes are done right, with every dollar you deserve.'
              : 'Go over your return together and get answers to any questions.'}
          </div>
        </p.Stack>
        {(hasVariant($state, 'productFamily', 'fs') ? true : true) ? (
          <p.Stack
            as={'div'}
            data-plasmic-name={'item4'}
            data-plasmic-override={overrides.item4}
            hasGap={true}
            className={classNames(projectcss.all, sty.item4, {
              [sty.item4productFamily_fs]: hasVariant(
                $state,
                'productFamily',
                'fs',
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xxJm5,
                {
                  [sty.textproductFamily_diy__xxJm5YtOXu]: hasVariant(
                    $state,
                    'productFamily',
                    'diy',
                  ),
                  [sty.textproductFamily_fs__xxJm5J4H1]: hasVariant(
                    $state,
                    'productFamily',
                    'fs',
                  ),
                },
              )}
            >
              {hasVariant($state, 'productFamily', 'fs')
                ? '4 pay and file'
                : hasVariant($state, 'productFamily', 'diy')
                ? '3 YOUR SATISFACTION IS GUARANTEED'
                : '3 review your return'}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sZciW,
                {
                  [sty.textproductFamily_diy__sZciWYtOXu]: hasVariant(
                    $state,
                    'productFamily',
                    'diy',
                  ),
                  [sty.textproductFamily_fs__sZciWj4H1]: hasVariant(
                    $state,
                    'productFamily',
                    'fs',
                  ),
                },
              )}
            >
              {hasVariant($state, 'productFamily', 'fs')
                ? 'Once you pay and give your expert the thumbs up, they’ll file your return!'
                : hasVariant($state, 'productFamily', 'diy')
                ? "pay only when you're satisfied and ready to file, and get your maimum refund, guaranteed."
                : 'Go over your return together and get answers to any questions.'}
            </div>
          </p.Stack>
        ) : null}
        <p.Stack
          as={'div'}
          data-plasmic-name={'item5'}
          data-plasmic-override={overrides.item5}
          hasGap={true}
          className={classNames(projectcss.all, sty.item5, {
            [sty.item5productFamily_diy]: hasVariant(
              $state,
              'productFamily',
              'diy',
            ),
            [sty.item5productFamily_fs]: hasVariant(
              $state,
              'productFamily',
              'fs',
            ),
            [sty.item5productFamily_ttl]: hasVariant(
              $state,
              'productFamily',
              'ttl',
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iutsu,
            )}
          >
            {'Have more questions?'}
          </div>
        </p.Stack>
      </p.Stack>
      <div
        data-plasmic-name={'faqLinks'}
        data-plasmic-override={overrides.faqLinks}
        className={classNames(projectcss.all, sty.faqLinks, {
          [sty.faqLinksproductFamily_diy]: hasVariant(
            $state,
            'productFamily',
            'diy',
          ),
          [sty.faqLinksproductFamily_fs]: hasVariant(
            $state,
            'productFamily',
            'fs',
          ),
          [sty.faqLinksproductFamily_ttl]: hasVariant(
            $state,
            'productFamily',
            'ttl',
          ),
        })}
      >
        {true ? (
          <div
            data-plasmic-name={'faqMw'}
            data-plasmic-override={overrides.faqMw}
            className={classNames(projectcss.all, sty.faqMw)}
          >
            {p.renderPlasmicSlot({
              defaultContents: 'Live Assisted FAQ',
              value: args.faqButtonMobile,
              className: classNames(sty.slotTargetFaqButtonMobile, {
                [sty.slotTargetFaqButtonMobileproductFamily_diy]: hasVariant(
                  $state,
                  'productFamily',
                  'diy',
                ),
                [sty.slotTargetFaqButtonMobileproductFamily_fs]: hasVariant(
                  $state,
                  'productFamily',
                  'fs',
                ),
                [sty.slotTargetFaqButtonMobileproductFamily_ttl]: hasVariant(
                  $state,
                  'productFamily',
                  'ttl',
                ),
              }),
            })}
          </div>
        ) : null}
        {(hasVariant($state, 'productFamily', 'ttl') ? true : true) ? (
          <div
            data-plasmic-name={'faqSw'}
            data-plasmic-override={overrides.faqSw}
            className={classNames(projectcss.all, sty.faqSw, {
              [sty.faqSwproductFamily_diy]: hasVariant(
                $state,
                'productFamily',
                'diy',
              ),
              [sty.faqSwproductFamily_fs]: hasVariant(
                $state,
                'productFamily',
                'fs',
              ),
              [sty.faqSwproductFamily_ttl]: hasVariant(
                $state,
                'productFamily',
                'ttl',
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <ScrollToFaqFooterLink
                  className={classNames(
                    '__wab_instance',
                    sty.scrollToFaqFooterLink__v5Dr,
                  )}
                  color={'white' as const}
                />
              ),

              value: args.faqButtonStationary,
            })}
          </div>
        ) : null}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'assistedRecoCard',
    'freeBox',
    'item1',
    'item2',
    'item3',
    'item4',
    'item5',
    'faqLinks',
    'faqMw',
    'faqSw',
  ],
  assistedRecoCard: [
    'assistedRecoCard',
    'freeBox',
    'item1',
    'item2',
    'item3',
    'item4',
    'item5',
  ],
  freeBox: ['freeBox'],
  item1: ['item1'],
  item2: ['item2'],
  item3: ['item3'],
  item4: ['item4'],
  item5: ['item5'],
  faqLinks: ['faqLinks', 'faqMw', 'faqSw'],
  faqMw: ['faqMw'],
  faqSw: ['faqSw'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  assistedRecoCard: 'div';
  freeBox: 'div';
  item1: 'div';
  item2: 'div';
  item3: 'div';
  item4: 'div';
  item5: 'div';
  faqLinks: 'div';
  faqMw: 'div';
  faqSw: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductItemDetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductItemDetail__VariantsArgs;
    args?: PlasmicProductItemDetail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductItemDetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductItemDetail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductItemDetail__ArgProps,
          internalVariantPropNames: PlasmicProductItemDetail__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicProductItemDetail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicProductItemDetail';
  } else {
    func.displayName = `PlasmicProductItemDetail.${nodeName}`;
  }
  return func;
}

export const PlasmicProductItemDetail = Object.assign(
  // Top-level PlasmicProductItemDetail renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    assistedRecoCard: makeNodeComponent('assistedRecoCard'),
    freeBox: makeNodeComponent('freeBox'),
    item1: makeNodeComponent('item1'),
    item2: makeNodeComponent('item2'),
    item3: makeNodeComponent('item3'),
    item4: makeNodeComponent('item4'),
    item5: makeNodeComponent('item5'),
    faqLinks: makeNodeComponent('faqLinks'),
    faqMw: makeNodeComponent('faqMw'),
    faqSw: makeNodeComponent('faqSw'),

    // Metadata about props expected for PlasmicProductItemDetail
    internalVariantProps: PlasmicProductItemDetail__VariantProps,
    internalArgProps: PlasmicProductItemDetail__ArgProps,
  },
);

export default PlasmicProductItemDetail;
/* prettier-ignore-end */
