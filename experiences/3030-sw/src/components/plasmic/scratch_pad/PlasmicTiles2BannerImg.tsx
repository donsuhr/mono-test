// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: ERClRSWr6EY

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicTiles2BannerImg.module.css'; // plasmic-import: ERClRSWr6EY/css

import Ellipse605Icon from './icons/PlasmicIcon__Ellipse605'; // plasmic-import: VDvSxJSxchNT/icon
import Vector23Icon from './icons/PlasmicIcon__Vector23'; // plasmic-import: 2PHZsr18Q/icon
import MountainsIcon from './icons/PlasmicIcon__Mountains'; // plasmic-import: LZTgmkiPTW/icon
import Vector24Icon from './icons/PlasmicIcon__Vector24'; // plasmic-import: gHxfxgwxU6/icon
import Vector25Icon from './icons/PlasmicIcon__Vector25'; // plasmic-import: SHjBDp1FTq/icon
import Vector26Icon from './icons/PlasmicIcon__Vector26'; // plasmic-import: anKsLrPZiw/icon
import Vector27Icon from './icons/PlasmicIcon__Vector27'; // plasmic-import: 9N6a3gTjt8Z/icon
import Vector28Icon from './icons/PlasmicIcon__Vector28'; // plasmic-import: e9vaHB-zCzJ/icon
import Vector29Icon from './icons/PlasmicIcon__Vector29'; // plasmic-import: wFYyeHpcY0R/icon
import Vector30Icon from './icons/PlasmicIcon__Vector30'; // plasmic-import: tYo3G7XMuOF/icon
import Vector31Icon from './icons/PlasmicIcon__Vector31'; // plasmic-import: gmC3bT0D7xj/icon
import Vector32Icon from './icons/PlasmicIcon__Vector32'; // plasmic-import: 153sUgCBtdR/icon
import Vector33Icon from './icons/PlasmicIcon__Vector33'; // plasmic-import: wfj_hqc_PG6/icon
import Vector34Icon from './icons/PlasmicIcon__Vector34'; // plasmic-import: _Tr_b6QyAMw/icon
import Vector35Icon from './icons/PlasmicIcon__Vector35'; // plasmic-import: EBPrMSvsV7i/icon
import Vector36Icon from './icons/PlasmicIcon__Vector36'; // plasmic-import: L5YkIOaxTjO/icon
import Vector37Icon from './icons/PlasmicIcon__Vector37'; // plasmic-import: 52B0bsOrpwp/icon
import Vector38Icon from './icons/PlasmicIcon__Vector38'; // plasmic-import: pqIebGJNc9P/icon
import Vector39Icon from './icons/PlasmicIcon__Vector39'; // plasmic-import: 6AwWJSmlveD/icon
import Vector40Icon from './icons/PlasmicIcon__Vector40'; // plasmic-import: 9AzcSokzhwg/icon
import Vector41Icon from './icons/PlasmicIcon__Vector41'; // plasmic-import: 0dfpbLNeJZI/icon
import Vector42Icon from './icons/PlasmicIcon__Vector42'; // plasmic-import: QZlGgXqxW7q/icon
import Vector43Icon from './icons/PlasmicIcon__Vector43'; // plasmic-import: lR8vZRAH68H/icon
import SquiggleIcon from './icons/PlasmicIcon__Squiggle'; // plasmic-import: dDutTvFmfKc/icon
import RTreeIcon from './icons/PlasmicIcon__RTree'; // plasmic-import: UHiTu5nOeGM/icon
import LCloudIcon from './icons/PlasmicIcon__LCloud'; // plasmic-import: 4nmvSp1rzc9/icon
import CloudIcon from './icons/PlasmicIcon__Cloud'; // plasmic-import: Qa89FdZQ-pF/icon
import LTreeIcon from './icons/PlasmicIcon__LTree'; // plasmic-import: OwIo7y7EW67/icon
import Vector44Icon from './icons/PlasmicIcon__Vector44'; // plasmic-import: FDPl0W2GEya/icon
import Vector45Icon from './icons/PlasmicIcon__Vector45'; // plasmic-import: CJZJo7_urgf/icon
import Vector46Icon from './icons/PlasmicIcon__Vector46'; // plasmic-import: U-BAQPjmDPJ/icon
import Vector47Icon from './icons/PlasmicIcon__Vector47'; // plasmic-import: _0q3J2HjlIB/icon
import standingDogJWt9HpM4F7 from './images/standingDog.svg'; // plasmic-import: jWt9HpM4F7/picture

export type PlasmicTiles2BannerImg__VariantMembers = {};
export type PlasmicTiles2BannerImg__VariantsArgs = {};
type VariantPropType = keyof PlasmicTiles2BannerImg__VariantsArgs;
export const PlasmicTiles2BannerImg__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTiles2BannerImg__ArgsType = {};
type ArgPropType = keyof PlasmicTiles2BannerImg__ArgsType;
export const PlasmicTiles2BannerImg__ArgProps = new Array<ArgPropType>();

export type PlasmicTiles2BannerImg__OverridesType = {
  root?: p.Flex<'div'>;
  illoGuyDog?: p.Flex<'div'>;
  xsDanceScene?: p.Flex<'div'>;
  greenGuy?: p.Flex<'div'>;
  img?: p.Flex<'img'>;
};

export interface DefaultTiles2BannerImgProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTiles2BannerImg__RenderFunc(props: {
  variants: PlasmicTiles2BannerImg__VariantsArgs;
  args: PlasmicTiles2BannerImg__ArgsType;
  overrides: PlasmicTiles2BannerImg__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <div
        data-plasmic-name={'illoGuyDog'}
        data-plasmic-override={overrides.illoGuyDog}
        className={classNames(projectcss.all, sty.illoGuyDog)}
      >
        <Ellipse605Icon
          className={classNames(projectcss.all, sty.svg__atsjp)}
          role={'img'}
        />

        <div
          data-plasmic-name={'xsDanceScene'}
          data-plasmic-override={overrides.xsDanceScene}
          className={classNames(projectcss.all, sty.xsDanceScene)}
        >
          {false ? (
            <Vector23Icon
              className={classNames(projectcss.all, sty.svg__pMjH)}
              role={'img'}
            />
          ) : null}
          <MountainsIcon
            className={classNames(projectcss.all, sty.svg__epD6V)}
            role={'img'}
          />

          <Vector24Icon
            className={classNames(projectcss.all, sty.svg__d3W22)}
            role={'img'}
          />

          <div
            data-plasmic-name={'greenGuy'}
            data-plasmic-override={overrides.greenGuy}
            className={classNames(projectcss.all, sty.greenGuy)}
          >
            <Vector25Icon
              className={classNames(projectcss.all, sty.svg___2EVv)}
              role={'img'}
            />

            <Vector26Icon
              className={classNames(projectcss.all, sty.svg__uy4Un)}
              role={'img'}
            />

            <img
              data-plasmic-name={'img'}
              data-plasmic-override={overrides.img}
              alt={''}
              className={classNames(projectcss.all, projectcss.img, sty.img)}
              src={standingDogJWt9HpM4F7}
            />

            <Vector27Icon
              className={classNames(projectcss.all, sty.svg__xIk8D)}
              role={'img'}
            />

            <Vector28Icon
              className={classNames(projectcss.all, sty.svg___2U7Xl)}
              role={'img'}
            />

            <Vector29Icon
              className={classNames(projectcss.all, sty.svg__zboM3)}
              role={'img'}
            />

            <Vector30Icon
              className={classNames(projectcss.all, sty.svg__zxEqb)}
              role={'img'}
            />

            <Vector31Icon
              className={classNames(projectcss.all, sty.svg___0CfWr)}
              role={'img'}
            />

            <Vector32Icon
              className={classNames(projectcss.all, sty.svg__qYumv)}
              role={'img'}
            />

            <Vector33Icon
              className={classNames(projectcss.all, sty.svg__h6NIo)}
              role={'img'}
            />

            <Vector34Icon
              className={classNames(projectcss.all, sty.svg__pxWla)}
              role={'img'}
            />

            <Vector35Icon
              className={classNames(projectcss.all, sty.svg__pQ8H)}
              role={'img'}
            />

            <Vector36Icon
              className={classNames(projectcss.all, sty.svg__zgKBg)}
              role={'img'}
            />

            <Vector37Icon
              className={classNames(projectcss.all, sty.svg___1Rk2)}
              role={'img'}
            />

            <Vector38Icon
              className={classNames(projectcss.all, sty.svg__gbWub)}
              role={'img'}
            />

            <Vector39Icon
              className={classNames(projectcss.all, sty.svg__fPs7G)}
              role={'img'}
            />

            <Vector40Icon
              className={classNames(projectcss.all, sty.svg__kB7Y)}
              role={'img'}
            />

            <Vector41Icon
              className={classNames(projectcss.all, sty.svg__aQzlo)}
              role={'img'}
            />

            <Vector42Icon
              className={classNames(projectcss.all, sty.svg__dxL5D)}
              role={'img'}
            />

            <Vector43Icon
              className={classNames(projectcss.all, sty.svg___7CNwo)}
              role={'img'}
            />
          </div>
          <SquiggleIcon
            className={classNames(projectcss.all, sty.svg__h0R8W)}
            role={'img'}
          />

          <RTreeIcon
            className={classNames(projectcss.all, sty.svg__epURp)}
            role={'img'}
          />

          <LCloudIcon
            className={classNames(projectcss.all, sty.svg___0ArT8)}
            role={'img'}
          />

          <CloudIcon
            className={classNames(projectcss.all, sty.svg___8K8Iz)}
            role={'img'}
          />

          <LTreeIcon
            className={classNames(projectcss.all, sty.svg__oyAj)}
            role={'img'}
          />

          <Vector44Icon
            className={classNames(projectcss.all, sty.svg__suntk)}
            role={'img'}
          />

          <Vector45Icon
            className={classNames(projectcss.all, sty.svg__i2Kgu)}
            role={'img'}
          />

          <Vector46Icon
            className={classNames(projectcss.all, sty.svg__imCt6)}
            role={'img'}
          />

          <Vector47Icon
            className={classNames(projectcss.all, sty.svg__oGFgs)}
            role={'img'}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'illoGuyDog', 'xsDanceScene', 'greenGuy', 'img'],
  illoGuyDog: ['illoGuyDog', 'xsDanceScene', 'greenGuy', 'img'],
  xsDanceScene: ['xsDanceScene', 'greenGuy', 'img'],
  greenGuy: ['greenGuy', 'img'],
  img: ['img'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  illoGuyDog: 'div';
  xsDanceScene: 'div';
  greenGuy: 'div';
  img: 'img';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTiles2BannerImg__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTiles2BannerImg__VariantsArgs;
    args?: PlasmicTiles2BannerImg__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTiles2BannerImg__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTiles2BannerImg__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTiles2BannerImg__ArgProps,
          internalVariantPropNames: PlasmicTiles2BannerImg__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicTiles2BannerImg__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTiles2BannerImg';
  } else {
    func.displayName = `PlasmicTiles2BannerImg.${nodeName}`;
  }
  return func;
}

export const PlasmicTiles2BannerImg = Object.assign(
  // Top-level PlasmicTiles2BannerImg renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    illoGuyDog: makeNodeComponent('illoGuyDog'),
    xsDanceScene: makeNodeComponent('xsDanceScene'),
    greenGuy: makeNodeComponent('greenGuy'),
    img: makeNodeComponent('img'),

    // Metadata about props expected for PlasmicTiles2BannerImg
    internalVariantProps: PlasmicTiles2BannerImg__VariantProps,
    internalArgProps: PlasmicTiles2BannerImg__ArgProps,
  },
);

export default PlasmicTiles2BannerImg;
/* prettier-ignore-end */
