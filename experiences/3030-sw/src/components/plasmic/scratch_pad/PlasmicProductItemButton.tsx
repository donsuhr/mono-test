// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: sT6QlGaq-kc

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicProductItemButton.module.css'; // plasmic-import: sT6QlGaq-kc/css

import ChevronDownIcon from './icons/PlasmicIcon__ChevronDown'; // plasmic-import: fe0fFRae7k-/icon

export type PlasmicProductItemButton__VariantMembers = {
  close: 'close';
};
export type PlasmicProductItemButton__VariantsArgs = {
  close?: SingleBooleanChoiceArg<'close'>;
};
type VariantPropType = keyof PlasmicProductItemButton__VariantsArgs;
export const PlasmicProductItemButton__VariantProps =
  new Array<VariantPropType>('close');

export type PlasmicProductItemButton__ArgsType = {};
type ArgPropType = keyof PlasmicProductItemButton__ArgsType;
export const PlasmicProductItemButton__ArgProps = new Array<ArgPropType>();

export type PlasmicProductItemButton__OverridesType = {
  root?: p.Flex<'div'>;
  howWorks?: p.Flex<'button'>;
  text?: p.Flex<'div'>;
  svg?: p.Flex<'svg'>;
};

export interface DefaultProductItemButtonProps {
  close?: SingleBooleanChoiceArg<'close'>;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProductItemButton__RenderFunc(props: {
  variants: PlasmicProductItemButton__VariantsArgs;
  args: PlasmicProductItemButton__ArgsType;
  overrides: PlasmicProductItemButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'close',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.close,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      {true ? (
        <p.Stack
          as={'button'}
          data-plasmic-name={'howWorks'}
          data-plasmic-override={overrides.howWorks}
          hasGap={true}
          aria-expanded={
            hasVariant($state, 'close', 'close')
              ? ('true' as const)
              : ('false' as const)
          }
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.howWorks,
            { [sty.howWorksclose]: hasVariant($state, 'close', 'close') },
          )}
          ref={(ref) => {
            $refs['howWorks'] = ref;
          }}
        >
          <div
            data-plasmic-name={'text'}
            data-plasmic-override={overrides.text}
            aria-expanded={
              hasVariant($state, 'close', 'close')
                ? ('true' as const)
                : undefined
            }
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              { [sty.textclose]: hasVariant($state, 'close', 'close') },
            )}
          >
            {hasVariant($state, 'close', 'close')
              ? 'Close'
              : 'See how it works'}
          </div>
          <ChevronDownIcon
            data-plasmic-name={'svg'}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgclose]: hasVariant($state, 'close', 'close'),
            })}
            role={'img'}
          />
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'howWorks', 'text', 'svg'],
  howWorks: ['howWorks', 'text', 'svg'],
  text: ['text'],
  svg: ['svg'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  howWorks: 'button';
  text: 'div';
  svg: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductItemButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductItemButton__VariantsArgs;
    args?: PlasmicProductItemButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductItemButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductItemButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductItemButton__ArgProps,
          internalVariantPropNames: PlasmicProductItemButton__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicProductItemButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicProductItemButton';
  } else {
    func.displayName = `PlasmicProductItemButton.${nodeName}`;
  }
  return func;
}

export const PlasmicProductItemButton = Object.assign(
  // Top-level PlasmicProductItemButton renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    howWorks: makeNodeComponent('howWorks'),
    text: makeNodeComponent('text'),
    svg: makeNodeComponent('svg'),

    // Metadata about props expected for PlasmicProductItemButton
    internalVariantProps: PlasmicProductItemButton__VariantProps,
    internalArgProps: PlasmicProductItemButton__ArgProps,
  },
);

export default PlasmicProductItemButton;
/* prettier-ignore-end */
