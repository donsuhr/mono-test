// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ssXJzNt8MiEu8LBoGu8nv3
// Component: 82yaaa1QB7

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_scratch_pad.module.css'; // plasmic-import: ssXJzNt8MiEu8LBoGu8nv3/projectcss
import sty from './PlasmicAnywayPencil.module.css'; // plasmic-import: 82yaaa1QB7/css

import patternpngHuysX8Kbq from './images/patternpng.png'; // plasmic-import: huysX8KBQ/picture
import image2B3SJXh7Yp from './images/image2.png'; // plasmic-import: b3sJXh7YP/picture
import image3H8RtKg2Gpc from './images/image3.svg'; // plasmic-import: H8rtKg2gpc/picture

export type PlasmicAnywayPencil__VariantMembers = {};
export type PlasmicAnywayPencil__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnywayPencil__VariantsArgs;
export const PlasmicAnywayPencil__VariantProps = new Array<VariantPropType>();

export type PlasmicAnywayPencil__ArgsType = {
  simpleOnlyLink?: React.ReactNode;
  fileByLink?: React.ReactNode;
  text?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAnywayPencil__ArgsType;
export const PlasmicAnywayPencil__ArgProps = new Array<ArgPropType>(
  'simpleOnlyLink',
  'fileByLink',
  'text',
);

export type PlasmicAnywayPencil__OverridesType = {
  root?: p.Flex<'div'>;
  patternBg?: p.Flex<'img'>;
  whiteBg?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  pipe?: p.Flex<'div'>;
  imageContainerAltText?: p.Flex<'div'>;
  neil0?: p.Flex<'img'>;
  expertFilesForYou?: p.Flex<'img'>;
};

export interface DefaultAnywayPencilProps {
  simpleOnlyLink?: React.ReactNode;
  fileByLink?: React.ReactNode;
  text?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAnywayPencil__RenderFunc(props: {
  variants: PlasmicAnywayPencil__VariantsArgs;
  args: PlasmicAnywayPencil__ArgsType;
  overrides: PlasmicAnywayPencil__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      {true ? (
        <img
          data-plasmic-name={'patternBg'}
          data-plasmic-override={overrides.patternBg}
          alt={''}
          className={classNames(projectcss.all, projectcss.img, sty.patternBg)}
          loading={'lazy' as const}
          src={patternpngHuysX8Kbq}
        />
      ) : null}
      <p.Stack
        as={'div'}
        data-plasmic-name={'whiteBg'}
        data-plasmic-override={overrides.whiteBg}
        hasGap={true}
        className={classNames(projectcss.all, sty.whiteBg)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xLeV4,
              )}
            >
              {
                'New! File FREE: On your own, with expert help, or when an expert does your taxes'
              }
            </div>
          ),
          value: args.text,
        })}
        <div
          data-plasmic-name={'freeBox'}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dEgCf,
                )}
              >
                {'Simple tax returns only'}
              </div>
            ),
            value: args.simpleOnlyLink,
            className: classNames(sty.slotTargetSimpleOnlyLink),
          })}
          <div
            data-plasmic-name={'pipe'}
            data-plasmic-override={overrides.pipe}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.pipe,
            )}
          >
            {' | '}
          </div>
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bbHdH,
                )}
              >
                {'Must file by 2/15'}
              </div>
            ),
            value: args.fileByLink,
            className: classNames(sty.slotTargetFileByLink),
          })}
        </div>
      </p.Stack>
      <div
        data-plasmic-name={'imageContainerAltText'}
        data-plasmic-override={overrides.imageContainerAltText}
        aria-label={'New! An expert files for you' as const}
        className={classNames(projectcss.all, sty.imageContainerAltText)}
        role={'img' as const}
      >
        <img
          data-plasmic-name={'neil0'}
          data-plasmic-override={overrides.neil0}
          alt={''}
          className={classNames(projectcss.all, projectcss.img, sty.neil0)}
          loading={'eager' as const}
          src={image2B3SJXh7Yp}
        />

        <img
          data-plasmic-name={'expertFilesForYou'}
          data-plasmic-override={overrides.expertFilesForYou}
          alt={''}
          className={classNames(
            projectcss.all,
            projectcss.img,
            sty.expertFilesForYou,
          )}
          loading={'eager' as const}
          src={image3H8RtKg2Gpc}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'patternBg',
    'whiteBg',
    'freeBox',
    'pipe',
    'imageContainerAltText',
    'neil0',
    'expertFilesForYou',
  ],
  patternBg: ['patternBg'],
  whiteBg: ['whiteBg', 'freeBox', 'pipe'],
  freeBox: ['freeBox', 'pipe'],
  pipe: ['pipe'],
  imageContainerAltText: [
    'imageContainerAltText',
    'neil0',
    'expertFilesForYou',
  ],
  neil0: ['neil0'],
  expertFilesForYou: ['expertFilesForYou'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  patternBg: 'img';
  whiteBg: 'div';
  freeBox: 'div';
  pipe: 'div';
  imageContainerAltText: 'div';
  neil0: 'img';
  expertFilesForYou: 'img';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnywayPencil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnywayPencil__VariantsArgs;
    args?: PlasmicAnywayPencil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnywayPencil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAnywayPencil__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAnywayPencil__ArgProps,
          internalVariantPropNames: PlasmicAnywayPencil__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicAnywayPencil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicAnywayPencil';
  } else {
    func.displayName = `PlasmicAnywayPencil.${nodeName}`;
  }
  return func;
}

export const PlasmicAnywayPencil = Object.assign(
  // Top-level PlasmicAnywayPencil renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    patternBg: makeNodeComponent('patternBg'),
    whiteBg: makeNodeComponent('whiteBg'),
    freeBox: makeNodeComponent('freeBox'),
    pipe: makeNodeComponent('pipe'),
    imageContainerAltText: makeNodeComponent('imageContainerAltText'),
    neil0: makeNodeComponent('neil0'),
    expertFilesForYou: makeNodeComponent('expertFilesForYou'),

    // Metadata about props expected for PlasmicAnywayPencil
    internalVariantProps: PlasmicAnywayPencil__VariantProps,
    internalArgProps: PlasmicAnywayPencil__ArgProps,
  },
);

export default PlasmicAnywayPencil;
/* prettier-ignore-end */
