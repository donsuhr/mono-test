// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWL5f4gAFbwKhEp4ZCgaRf
// Component: MkWAsOGjhTO
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import AddFullServiceProductPricing from '../../AddFullServiceProductPricing'; // plasmic-import: VtRR0qoCB7a/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_mar_tech_atoms.module.css'; // plasmic-import: bWL5f4gAFbwKhEp4ZCgaRf/projectcss
import sty from './PlasmicAdditionalFeeModalContent.module.css'; // plasmic-import: MkWAsOGjhTO/css

export type PlasmicAdditionalFeeModalContent__VariantMembers = {};
export type PlasmicAdditionalFeeModalContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdditionalFeeModalContent__VariantsArgs;
export const PlasmicAdditionalFeeModalContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAdditionalFeeModalContent__ArgsType = {};
type ArgPropType = keyof PlasmicAdditionalFeeModalContent__ArgsType;
export const PlasmicAdditionalFeeModalContent__ArgProps =
  new Array<ArgPropType>();

export type PlasmicAdditionalFeeModalContent__OverridesType = {
  contentWrapper?: p.Flex<'div'>;
  h3?: p.Flex<'h3'>;
  ul?: p.Flex<'ul'>;
  freeBox?: p.Flex<'div'>;
  basic?: p.Flex<typeof AddFullServiceProductPricing>;
  addPrice2?: p.Flex<'div'>;
  finalPrice2?: p.Flex<'div'>;
  stateAdditional2?: p.Flex<'div'>;
  deluxe?: p.Flex<typeof AddFullServiceProductPricing>;
  addPrice3?: p.Flex<'div'>;
  finalPrice3?: p.Flex<'div'>;
  stateAdditional3?: p.Flex<'div'>;
  premier?: p.Flex<typeof AddFullServiceProductPricing>;
  addPrice4?: p.Flex<'div'>;
  finalPrice4?: p.Flex<'div'>;
  stateAdditional4?: p.Flex<'div'>;
  selfEmployed?: p.Flex<typeof AddFullServiceProductPricing>;
  p?: p.Flex<'p'>;
};

export interface DefaultAdditionalFeeModalContentProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAdditionalFeeModalContent__RenderFunc(props: {
  variants: PlasmicAdditionalFeeModalContent__VariantsArgs;
  args: PlasmicAdditionalFeeModalContent__ArgsType;
  overrides: PlasmicAdditionalFeeModalContent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={'contentWrapper'}
      data-plasmic-override={overrides.contentWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.contentWrapper,
      )}
    >
      <h3
        data-plasmic-name={'h3'}
        data-plasmic-override={overrides.h3}
        className={classNames(
          projectcss.all,
          projectcss.h3,
          projectcss.__wab_text,
          sty.h3,
        )}
      >
        <p.Trans>{'Have a tax expert do your taxes for you'}</p.Trans>
      </h3>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__mXumn,
        )}
      >
        <p.Trans>{'Hereâ€™s how it works:'}</p.Trans>
      </div>

      <ul
        data-plasmic-name={'ul'}
        data-plasmic-override={overrides.ul}
        className={classNames(projectcss.all, projectcss.ul, sty.ul)}
      >
        <li
          className={classNames(
            projectcss.all,
            projectcss.li,
            projectcss.__wab_text,
            sty.li__s36Rt,
          )}
        >
          <p.Trans>
            {'Securely share your docs to get matched with an expert'}
          </p.Trans>
        </li>

        <li
          className={classNames(
            projectcss.all,
            projectcss.li,
            projectcss.__wab_text,
            sty.li__arTU,
          )}
        >
          <p.Trans>
            {'Your expert can start doing your taxes right away\n'}
          </p.Trans>
        </li>

        <li
          className={classNames(
            projectcss.all,
            projectcss.li,
            projectcss.__wab_text,
            sty.li__ocbph,
          )}
        >
          <p.Trans>
            {
              'Review everything with your expert before they sign and file for you'
            }
          </p.Trans>
        </li>
      </ul>

      <div
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <AddFullServiceProductPricing
          data-plasmic-name={'basic'}
          data-plasmic-override={overrides.basic}
          additionalPrice={
            <div
              data-plasmic-name={'addPrice2'}
              data-plasmic-override={overrides.addPrice2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.addPrice2,
              )}
            >
              <p.Trans>{'+$50*'}</p.Trans>
            </div>
          }
          basePrice={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8QcgN,
              )}
            >
              <p.Trans>{'$80'}</p.Trans>
            </div>
          }
          className={classNames('__wab_instance', sty.basic)}
          finalPrice={
            <div
              data-plasmic-name={'finalPrice2'}
              data-plasmic-override={overrides.finalPrice2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.finalPrice2,
              )}
            >
              <p.Trans>{'$130*'}</p.Trans>
            </div>
          }
          productDescription={<p.Trans>{'Simple tax returns\n '}</p.Trans>}
          productName={<p.Trans>{'Basic'}</p.Trans>}
          stateAdditional={
            <div
              data-plasmic-name={'stateAdditional2'}
              data-plasmic-override={overrides.stateAdditional2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.stateAdditional2,
              )}
            >
              <p.Trans>{'State additional'}</p.Trans>
            </div>
          }
        />

        <AddFullServiceProductPricing
          data-plasmic-name={'deluxe'}
          data-plasmic-override={overrides.deluxe}
          additionalPrice={
            <div
              data-plasmic-name={'addPrice3'}
              data-plasmic-override={overrides.addPrice3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.addPrice3,
              )}
            >
              <p.Trans>{'+$80*'}</p.Trans>
            </div>
          }
          basePrice={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0NkzV,
              )}
            >
              <p.Trans>{'$120*'}</p.Trans>
            </div>
          }
          className={classNames('__wab_instance', sty.deluxe)}
          finalPrice={
            <div
              data-plasmic-name={'finalPrice3'}
              data-plasmic-override={overrides.finalPrice3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.finalPrice3,
              )}
            >
              <p.Trans>{'$200*'}</p.Trans>
            </div>
          }
          productDescription={
            <p.Trans>{'Maximize tax deductions and credits'}</p.Trans>
          }
          productName={<p.Trans>{'Deluxe'}</p.Trans>}
          stateAdditional={
            <div
              data-plasmic-name={'stateAdditional3'}
              data-plasmic-override={overrides.stateAdditional3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.stateAdditional3,
              )}
            >
              <p.Trans>{'State additional'}</p.Trans>
            </div>
          }
        />

        <AddFullServiceProductPricing
          data-plasmic-name={'premier'}
          data-plasmic-override={overrides.premier}
          additionalPrice={
            <div
              data-plasmic-name={'addPrice4'}
              data-plasmic-override={overrides.addPrice4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.addPrice4,
              )}
            >
              <p.Trans>{'+$90*'}</p.Trans>
            </div>
          }
          basePrice={<p.Trans>{'$170*'}</p.Trans>}
          className={classNames('__wab_instance', sty.premier)}
          finalPrice={
            <div
              data-plasmic-name={'finalPrice4'}
              data-plasmic-override={overrides.finalPrice4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.finalPrice4,
              )}
            >
              <p.Trans>{'$260*'}</p.Trans>
            </div>
          }
          productDescription={
            <p.Trans>{'Investments and rental property'}</p.Trans>
          }
          productName={<p.Trans>{'Premier'}</p.Trans>}
          stateAdditional={
            <div
              data-plasmic-name={'stateAdditional4'}
              data-plasmic-override={overrides.stateAdditional4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.stateAdditional4,
              )}
            >
              <p.Trans>{'State additional'}</p.Trans>
            </div>
          }
        />

        <AddFullServiceProductPricing
          data-plasmic-name={'selfEmployed'}
          data-plasmic-override={overrides.selfEmployed}
          basePrice={<p.Trans>{'$200*'}</p.Trans>}
          className={classNames('__wab_instance', sty.selfEmployed)}
        />
      </div>

      <p
        data-plasmic-name={'p'}
        data-plasmic-override={overrides.p}
        className={classNames(
          projectcss.all,
          projectcss.p,
          projectcss.__wab_text,
          sty.p,
        )}
      >
        <p.Trans>
          {
            'If you have a tax expert do your taxes, youâ€™ll connect with them on a one-way video call and share your tax documents. Your expert will take it from there and make sure you get every dollar you deserve.  Or feel free to work on your taxes yourself, and let us know if you need help by selecting the Live Help button.'
          }
        </p.Trans>
      </p>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  contentWrapper: [
    'contentWrapper',
    'h3',
    'ul',
    'freeBox',
    'basic',
    'addPrice2',
    'finalPrice2',
    'stateAdditional2',
    'deluxe',
    'addPrice3',
    'finalPrice3',
    'stateAdditional3',
    'premier',
    'addPrice4',
    'finalPrice4',
    'stateAdditional4',
    'selfEmployed',
    'p',
  ],
  h3: ['h3'],
  ul: ['ul'],
  freeBox: [
    'freeBox',
    'basic',
    'addPrice2',
    'finalPrice2',
    'stateAdditional2',
    'deluxe',
    'addPrice3',
    'finalPrice3',
    'stateAdditional3',
    'premier',
    'addPrice4',
    'finalPrice4',
    'stateAdditional4',
    'selfEmployed',
  ],
  basic: ['basic', 'addPrice2', 'finalPrice2', 'stateAdditional2'],
  addPrice2: ['addPrice2'],
  finalPrice2: ['finalPrice2'],
  stateAdditional2: ['stateAdditional2'],
  deluxe: ['deluxe', 'addPrice3', 'finalPrice3', 'stateAdditional3'],
  addPrice3: ['addPrice3'],
  finalPrice3: ['finalPrice3'],
  stateAdditional3: ['stateAdditional3'],
  premier: ['premier', 'addPrice4', 'finalPrice4', 'stateAdditional4'],
  addPrice4: ['addPrice4'],
  finalPrice4: ['finalPrice4'],
  stateAdditional4: ['stateAdditional4'],
  selfEmployed: ['selfEmployed'],
  p: ['p'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  contentWrapper: 'div';
  h3: 'h3';
  ul: 'ul';
  freeBox: 'div';
  basic: typeof AddFullServiceProductPricing;
  addPrice2: 'div';
  finalPrice2: 'div';
  stateAdditional2: 'div';
  deluxe: typeof AddFullServiceProductPricing;
  addPrice3: 'div';
  finalPrice3: 'div';
  stateAdditional3: 'div';
  premier: typeof AddFullServiceProductPricing;
  addPrice4: 'div';
  finalPrice4: 'div';
  stateAdditional4: 'div';
  selfEmployed: typeof AddFullServiceProductPricing;
  p: 'p';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdditionalFeeModalContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdditionalFeeModalContent__VariantsArgs;
    args?: PlasmicAdditionalFeeModalContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdditionalFeeModalContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdditionalFeeModalContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdditionalFeeModalContent__ArgProps,
          internalVariantPropNames:
            PlasmicAdditionalFeeModalContent__VariantProps,
        }),
      [props, nodeName],
    );

    return PlasmicAdditionalFeeModalContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'contentWrapper') {
    func.displayName = 'PlasmicAdditionalFeeModalContent';
  } else {
    func.displayName = `PlasmicAdditionalFeeModalContent.${nodeName}`;
  }
  return func;
}

export const PlasmicAdditionalFeeModalContent = Object.assign(
  // Top-level PlasmicAdditionalFeeModalContent renders the root element
  makeNodeComponent('contentWrapper'),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent('h3'),
    ul: makeNodeComponent('ul'),
    freeBox: makeNodeComponent('freeBox'),
    basic: makeNodeComponent('basic'),
    addPrice2: makeNodeComponent('addPrice2'),
    finalPrice2: makeNodeComponent('finalPrice2'),
    stateAdditional2: makeNodeComponent('stateAdditional2'),
    deluxe: makeNodeComponent('deluxe'),
    addPrice3: makeNodeComponent('addPrice3'),
    finalPrice3: makeNodeComponent('finalPrice3'),
    stateAdditional3: makeNodeComponent('stateAdditional3'),
    premier: makeNodeComponent('premier'),
    addPrice4: makeNodeComponent('addPrice4'),
    finalPrice4: makeNodeComponent('finalPrice4'),
    stateAdditional4: makeNodeComponent('stateAdditional4'),
    selfEmployed: makeNodeComponent('selfEmployed'),
    p: makeNodeComponent('p'),

    // Metadata about props expected for PlasmicAdditionalFeeModalContent
    internalVariantProps: PlasmicAdditionalFeeModalContent__VariantProps,
    internalArgProps: PlasmicAdditionalFeeModalContent__ArgProps,
  },
);

export default PlasmicAdditionalFeeModalContent;
/* prettier-ignore-end */
