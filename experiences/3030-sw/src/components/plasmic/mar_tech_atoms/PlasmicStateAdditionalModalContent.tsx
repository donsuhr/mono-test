// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWL5f4gAFbwKhEp4ZCgaRf
// Component: JxEAgSZb1yC
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_mar_tech_atoms.module.css'; // plasmic-import: bWL5f4gAFbwKhEp4ZCgaRf/projectcss
import sty from './PlasmicStateAdditionalModalContent.module.css'; // plasmic-import: JxEAgSZb1yC/css

export type PlasmicStateAdditionalModalContent__VariantMembers = {};
export type PlasmicStateAdditionalModalContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicStateAdditionalModalContent__VariantsArgs;
export const PlasmicStateAdditionalModalContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStateAdditionalModalContent__ArgsType = {
  price?: React.ReactNode;
  disclaimerText?: React.ReactNode;
  heading1?: React.ReactNode;
  heading2?: React.ReactNode;
  heading3?: React.ReactNode;
  priceHeading?: React.ReactNode;
  text1?: React.ReactNode;
  text2?: React.ReactNode;
  text3?: React.ReactNode;
  heading4?: React.ReactNode;
  subText2?: React.ReactNode;
  subText3?: React.ReactNode;
  subText4?: React.ReactNode;
  subText5?: React.ReactNode;
  subText1?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStateAdditionalModalContent__ArgsType;
export const PlasmicStateAdditionalModalContent__ArgProps =
  new Array<ArgPropType>(
    'price',
    'disclaimerText',
    'heading1',
    'heading2',
    'heading3',
    'priceHeading',
    'text1',
    'text2',
    'text3',
    'heading4',
    'subText2',
    'subText3',
    'subText4',
    'subText5',
    'subText1',
  );

export type PlasmicStateAdditionalModalContent__OverridesType = {
  root?: p.Flex<'div'>;
  priceWrapper?: p.Flex<'div'>;
};

export interface DefaultStateAdditionalModalContentProps {
  price?: React.ReactNode;
  disclaimerText?: React.ReactNode;
  heading1?: React.ReactNode;
  heading2?: React.ReactNode;
  heading3?: React.ReactNode;
  priceHeading?: React.ReactNode;
  text1?: React.ReactNode;
  text2?: React.ReactNode;
  text3?: React.ReactNode;
  heading4?: React.ReactNode;
  subText2?: React.ReactNode;
  subText3?: React.ReactNode;
  subText4?: React.ReactNode;
  subText5?: React.ReactNode;
  subText1?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicStateAdditionalModalContent__RenderFunc(props: {
  variants: PlasmicStateAdditionalModalContent__VariantsArgs;
  args: PlasmicStateAdditionalModalContent__ArgsType;
  overrides: PlasmicStateAdditionalModalContent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: <p.Trans>{'Save time with TurboTax State'}</p.Trans>,
        value: args.heading1,
        className: classNames(sty.slotTargetHeading1),
      })}

      <div className={classNames(projectcss.all, sty.freeBox__vFt1C)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.Trans>
              {'We automatically transfer your information to TurboTax State.'}
            </p.Trans>
          ),
          value: args.heading2,
          className: classNames(sty.slotTargetHeading2),
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__nb49O)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.Trans>
              {
                "Once you've completed your federal tax return, we'll automatically transfer your information and give you the option of completing your state taxes using TurboTax."
              }
            </p.Trans>
          ),
          value: args.heading3,
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__zy6Gl)}>
        {p.renderPlasmicSlot({
          defaultContents: <p.Trans>{'Price per state'}</p.Trans>,
          value: args.priceHeading,
          className: classNames(sty.slotTargetPriceHeading),
        })}

        <div
          data-plasmic-name={'priceWrapper'}
          data-plasmic-override={overrides.priceWrapper}
          className={classNames(projectcss.all, sty.priceWrapper)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xh4Iv,
                )}
              >
                <p.Trans>{'$40'}</p.Trans>
              </div>
            ),

            value: args.price,
            className: classNames(sty.slotTargetPrice),
          })}
        </div>

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__jHyU7)}>
            {true
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xo0Ka,
                      )}
                    >
                      <p.Trans>{''}</p.Trans>
                    </div>
                  ),

                  value: args.disclaimerText,
                  className: classNames(sty.slotTargetDisclaimerText),
                })
              : null}
          </div>
        ) : null}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__ntNWd)}>
        <div className={classNames(projectcss.all, sty.freeBox__ki5X8)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__i6SVd,
            )}
          >
            <p.Trans>{'1.'}</p.Trans>
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Trans>{'Complete your federal return'}</p.Trans>
            ),
            value: args.text1,
            className: classNames(sty.slotTargetText1),
          })}

          <img
            alt={'Submit Federal return' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img___0Uv4I,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-submit-fed.png' as const
            }
          />
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__zrNqS)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__q9TUz,
            )}
          >
            <p.Trans>{'2.'}</p.Trans>
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Trans>{'Your info automatically\ntransfers to state'}</p.Trans>
            ),
            value: args.text2,
            className: classNames(sty.slotTargetText2),
          })}

          <img
            alt={'Transfer information to Turbo Tax state' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img___8GMni,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-transfer-small.png' as const
            }
          />
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__d7Yxz)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7A67,
            )}
          >
            <p.Trans>{'3.'}</p.Trans>
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Trans>
                {
                  'Answer a few more\neasy questions and\ne-file for a fast refund'
                }
              </p.Trans>
            ),
            value: args.text3,
            className: classNames(sty.slotTargetText3),
          })}

          <img
            alt={'eFile for a fast refund' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__qsct4,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-refund.png' as const
            }
          />
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__azTnH)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.Trans>{"What's included with TurboTax State?"}</p.Trans>
          ),
          value: args.heading4,
          className: classNames(sty.slotTargetHeading4),
        })}
      </div>

      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qBrMo)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__dgDtH)}>
          <img
            alt={'e file' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__eEgqe,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-efile-small.jpg' as const
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__ytK)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wbgOo,
                  )}
                >
                  <p.Trans>
                    {
                      <React.Fragment>
                        <span
                          className={
                            'plasmic_default__all plasmic_default__span'
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {'Free e-file —'}
                        </span>
                        <React.Fragment>
                          {
                            ' With TurboTax State you can e-file your return at no additional cost.'
                          }
                        </React.Fragment>
                      </React.Fragment>
                    }
                  </p.Trans>
                </div>
              ),

              value: args.subText1,
            })}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__b1VaB)}>
          <img
            alt={'Transfer information to Turbo Tax state' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__kP4Gt,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-transfer-large.jpg' as const
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__z1GBr)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mqiYd,
                  )}
                >
                  <p.Trans>
                    {
                      <React.Fragment>
                        <span
                          className={
                            'plasmic_default__all plasmic_default__span'
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {'Automatic Transfer of Your Federal Information —'}
                        </span>
                        <React.Fragment>
                          {
                            " Your federal info automatically transfers into TurboTax State, so you don't have to type it twice."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    }
                  </p.Trans>
                </div>
              ),

              value: args.subText2,
            })}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__afswi)}>
          <img
            alt={'Maximum refund guarantee' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__yylbj,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-max-refund-small.jpg' as const
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__s5Psp)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uwjLc,
                  )}
                >
                  <p.Trans>
                    {
                      <React.Fragment>
                        <span
                          className={
                            'plasmic_default__all plasmic_default__span'
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {'Biggest State Refund, Guaranteed —'}
                        </span>
                        <React.Fragment>
                          {
                            " If you get a larger state refund using another tax preparation method, we'll give you your money back."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    }
                  </p.Trans>
                </div>
              ),

              value: args.subText3,
            })}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__ihXqO)}>
          <img
            alt={'100% accurate calculations' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img___0A9Xr,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-accurate.jpg' as const
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__lNjea)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h0XFq,
                  )}
                >
                  <p.Trans>
                    {
                      <React.Fragment>
                        <span
                          className={
                            'plasmic_default__all plasmic_default__span'
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {'100% Accurate Calculations, Guaranteed —'}
                        </span>
                        <React.Fragment>
                          {
                            " We guarantee our calculations are 100% accurate, or we'll pay you any IRS penalties plus interest."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    }
                  </p.Trans>
                </div>
              ),

              value: args.subText4,
            })}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__m0AbH)}>
          <img
            alt={'dollar sign' as const}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__b6Ima,
            )}
            src={
              'https://turbotax.intuit.com/handlebars/mktg/common/images/icon/icon-monitor.jpg' as const
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__tEkAk)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u3AFm,
                  )}
                >
                  <p.Trans>
                    {
                      <React.Fragment>
                        <span
                          className={
                            'plasmic_default__all plasmic_default__span'
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {'Refund Monitor —'}
                        </span>
                        <React.Fragment>
                          {
                            ' TurboTax State dynamically displays your tax savings to show how each deduction and credit affects your refund.'
                          }
                        </React.Fragment>
                      </React.Fragment>
                    }
                  </p.Trans>
                </div>
              ),

              value: args.subText5,
            })}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'priceWrapper'],
  priceWrapper: ['priceWrapper'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  priceWrapper: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStateAdditionalModalContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStateAdditionalModalContent__VariantsArgs;
    args?: PlasmicStateAdditionalModalContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicStateAdditionalModalContent__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicStateAdditionalModalContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicStateAdditionalModalContent__ArgProps,
          internalVariantPropNames:
            PlasmicStateAdditionalModalContent__VariantProps,
        }),
      [props, nodeName],
    );

    return PlasmicStateAdditionalModalContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicStateAdditionalModalContent';
  } else {
    func.displayName = `PlasmicStateAdditionalModalContent.${nodeName}`;
  }
  return func;
}

export const PlasmicStateAdditionalModalContent = Object.assign(
  // Top-level PlasmicStateAdditionalModalContent renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    priceWrapper: makeNodeComponent('priceWrapper'),

    // Metadata about props expected for PlasmicStateAdditionalModalContent
    internalVariantProps: PlasmicStateAdditionalModalContent__VariantProps,
    internalArgProps: PlasmicStateAdditionalModalContent__ArgProps,
  },
);

export default PlasmicStateAdditionalModalContent;
/* prettier-ignore-end */
