// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWL5f4gAFbwKhEp4ZCgaRf
// Component: tSWlyoA4eZN
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_mar_tech_atoms.module.css'; // plasmic-import: bWL5f4gAFbwKhEp4ZCgaRf/projectcss
import sty from './PlasmicTile.module.css'; // plasmic-import: tSWlyoA4eZN/css

import greenCheckCircleCompressedsvgDBulMnH98 from './images/greenCheckCircleCompressedsvg.svg'; // plasmic-import: DBulMnH98/picture
import greenCheckCircleKk7QrZzG64 from './images/greenCheckCircle.svg'; // plasmic-import: kk7QrZzG64/picture
import unemployedCompressedsvgCS4L5QtP from './images/unemployedCompressedsvg.svg'; // plasmic-import: -cS4L5qtP/picture
import ownHomeX4ZjKqr5Zu from './images/ownHome.svg'; // plasmic-import: x4ZjKqr5Zu/picture
import maximizeTaxCreditsT7V6CQvQa from './images/maximizeTaxCredits.svg'; // plasmic-import: T7V6_CQvQa/picture
import briefcaseQhGjDnpk5G from './images/briefcase.svg'; // plasmic-import: QhGJDnpk5g/picture
import rentGQCxCeZbji from './images/rent.svg'; // plasmic-import: gQCxCeZbji/picture
import dependentsChildrenCompressedsvgQNljoCioi from './images/dependentsChildrenCompressedsvg.svg'; // plasmic-import: qNljoCioi/picture
import ttlChatBubbleVztKpt9M4R from './images/ttlChatBubble.svg'; // plasmic-import: vztKPT9m4R/picture
import donateGiftBoxXtGwCAiTk8 from './images/donateGiftBox.svg'; // plasmic-import: XtGwCAiTk8/picture
import gradCapStudentX2JivTgRIa from './images/gradCapStudent.svg'; // plasmic-import: x2JivTgRIa/picture
import stockChart3SerdvdLaI from './images/stockChart.svg'; // plasmic-import: 3SerdvdLaI/picture
import selfEmployedCompressedsvgSXK1EuQm from './images/selfEmployedCompressedsvg.svg'; // plasmic-import: sX-K1EUQm/picture
import openSignSZuP6XSoxj from './images/openSign.svg'; // plasmic-import: SZuP6xSoxj/picture
import ttlfsVM1Ormmm3W from './images/ttlfs.svg'; // plasmic-import: vM1ormmm3W/picture
import rentalPropertyDQvZrf6Qe15 from './images/rentalProperty.svg'; // plasmic-import: DQvZrf6QE15/picture
import otherServiceLaptopBOwYhafOA7 from './images/otherServiceLaptop.svg'; // plasmic-import: BOwYhaf-oA7/picture
import turboTaxFlagW5W2RVie8U from './images/turboTaxFlag.svg'; // plasmic-import: w5w2r_vie8U/picture
import accountantExpertFojZVnMXk from './images/accountantExpert.svg'; // plasmic-import: fojZVn_mXk/picture
import folderEmpty96Je3ThU56E from './images/folderEmpty.svg'; // plasmic-import: 96JE3ThU56e/picture
import gradCapStudent2IImOdR4P3 from './images/gradCapStudent2.svg'; // plasmic-import: iImOdR_4P3/picture
import unemployedQHNbUs1LJ from './images/unemployed.svg'; // plasmic-import: qHNbUs1lJ/picture

export type PlasmicTile__VariantMembers = {
  badge: 'red';
  state: 'active';
  icon:
    | 'ownHome'
    | 'maximizeHand'
    | 'briefcaseMoney'
    | 'rentSign'
    | 'dependentsChildren'
    | 'chatBubble'
    | 'donateGiftBox'
    | 'studentLoans'
    | 'stocksChart'
    | 'freelancerLaptop'
    | 'openSign'
    | 'expertLaptop'
    | 'rentalProperty'
    | 'otherServiceLaptop'
    | 'accountant'
    | 'folderEmpty'
    | 'turboTaxFlag'
    | 'studentLoans2'
    | 'unemployment';
};
export type PlasmicTile__VariantsArgs = {
  badge?: SingleChoiceArg<'red'>;
  state?: SingleChoiceArg<'active'>;
  icon?: SingleChoiceArg<
    | 'ownHome'
    | 'maximizeHand'
    | 'briefcaseMoney'
    | 'rentSign'
    | 'dependentsChildren'
    | 'chatBubble'
    | 'donateGiftBox'
    | 'studentLoans'
    | 'stocksChart'
    | 'freelancerLaptop'
    | 'openSign'
    | 'expertLaptop'
    | 'rentalProperty'
    | 'otherServiceLaptop'
    | 'accountant'
    | 'folderEmpty'
    | 'turboTaxFlag'
    | 'studentLoans2'
    | 'unemployment'
  >;
};
type VariantPropType = keyof PlasmicTile__VariantsArgs;
export const PlasmicTile__VariantProps = new Array<VariantPropType>(
  'badge',
  'state',
  'icon',
);

export type PlasmicTile__ArgsType = {
  text?: React.ReactNode;
  badgeText?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTile__ArgsType;
export const PlasmicTile__ArgProps = new Array<ArgPropType>(
  'text',
  'badgeText',
);

export type PlasmicTile__OverridesType = {
  tileWrapper?: p.Flex<'button'>;
  badgeWrapper?: p.Flex<'div'>;
  tileIconAndText?: p.Flex<'div'>;
  checkMarkWrapper?: p.Flex<'div'>;
  tileIconWrapper?: p.Flex<'div'>;
  tileTextWrapper?: p.Flex<'div'>;
};

export interface DefaultTileProps {
  text?: React.ReactNode;
  badgeText?: React.ReactNode;
  badge?: SingleChoiceArg<'red'>;
  state?: SingleChoiceArg<'active'>;
  icon?: SingleChoiceArg<
    | 'ownHome'
    | 'maximizeHand'
    | 'briefcaseMoney'
    | 'rentSign'
    | 'dependentsChildren'
    | 'chatBubble'
    | 'donateGiftBox'
    | 'studentLoans'
    | 'stocksChart'
    | 'freelancerLaptop'
    | 'openSign'
    | 'expertLaptop'
    | 'rentalProperty'
    | 'otherServiceLaptop'
    | 'accountant'
    | 'folderEmpty'
    | 'turboTaxFlag'
    | 'studentLoans2'
    | 'unemployment'
  >;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTile__RenderFunc(props: {
  variants: PlasmicTile__VariantsArgs;
  args: PlasmicTile__ArgsType;
  overrides: PlasmicTile__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'badge',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.badge
          : undefined,
      },
      {
        path: 'state',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.state
          : undefined,
      },
      {
        path: 'icon',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.icon
          : undefined,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const [isTileWrapperHover, triggerTileWrapperHoverProps] = useTrigger(
    'useHover',
    {},
  );
  const [isTileWrapperNotFocusVisible, triggerTileWrapperNotFocusVisibleProps] =
    useTrigger('useFocusVisible', {
      isTextInput: false,
    });
  const [isTileWrapperFocusVisible, triggerTileWrapperFocusVisibleProps] =
    useTrigger('useFocusVisible', {
      isTextInput: false,
    });
  const triggers = {
    hoverNotFocusVisible_tileWrapper:
      isTileWrapperHover && !isTileWrapperNotFocusVisible,
    focusVisible_tileWrapper: isTileWrapperFocusVisible,
  };

  return (
    <button
      data-plasmic-name={'tileWrapper'}
      data-plasmic-override={overrides.tileWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.tileWrapper,
        {
          [sty.tileWrapper___focusVisible]: triggers.focusVisible_tileWrapper,
          [sty.tileWrapper___hover__notFocusVisible]:
            triggers.hoverNotFocusVisible_tileWrapper,
          [sty.tileWrapper___hover__notFocusVisible_state_active]:
            hasVariant($state, 'state', 'active') &&
            triggers.hoverNotFocusVisible_tileWrapper,
          [sty.tileWrapperbadge_red]: hasVariant($state, 'badge', 'red'),
          [sty.tileWrapperbadge_red_state_active]:
            hasVariant($state, 'state', 'active') &&
            hasVariant($state, 'badge', 'red'),
          [sty.tileWrapperbadge_red_state_active_icon_expertLaptop]:
            hasVariant($state, 'icon', 'expertLaptop') &&
            hasVariant($state, 'badge', 'red') &&
            hasVariant($state, 'state', 'active'),
          [sty.tileWrappericon_ownHome]: hasVariant($state, 'icon', 'ownHome'),
          [sty.tileWrappericon_turboTaxFlag]: hasVariant(
            $state,
            'icon',
            'turboTaxFlag',
          ),
          [sty.tileWrapperstate_active]: hasVariant($state, 'state', 'active'),
          [sty.tileWrapperstate_active____focusVisible]:
            hasVariant($state, 'state', 'active') &&
            triggers.focusVisible_tileWrapper,
        },
      )}
      ref={(ref) => {
        $refs['tileWrapper'] = ref;
      }}
      data-plasmic-trigger-props={[
        triggerTileWrapperHoverProps,
        triggerTileWrapperNotFocusVisibleProps,
        triggerTileWrapperFocusVisibleProps,
      ]}
    >
      {(hasVariant($state, 'badge', 'red') ? true : false) ? (
        <div
          data-plasmic-name={'badgeWrapper'}
          data-plasmic-override={overrides.badgeWrapper}
          className={classNames(projectcss.all, sty.badgeWrapper, {
            [sty.badgeWrapperbadge_red]: hasVariant($state, 'badge', 'red'),
            [sty.badgeWrapperbadge_red_state_active]:
              hasVariant($state, 'state', 'active') &&
              hasVariant($state, 'badge', 'red'),
            [sty.badgeWrapperbadge_red_state_active_icon_expertLaptop]:
              hasVariant($state, 'icon', 'expertLaptop') &&
              hasVariant($state, 'badge', 'red') &&
              hasVariant($state, 'state', 'active'),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d5Lw,
                )}
              >
                <p.Trans>{'NEW!'}</p.Trans>
              </div>
            ),

            value: args.badgeText,
            className: classNames(sty.slotTargetBadgeText, {
              [sty.slotTargetBadgeTextbadge_red]: hasVariant(
                $state,
                'badge',
                'red',
              ),
              [sty.slotTargetBadgeTextbadge_red_state_active]:
                hasVariant($state, 'state', 'active') &&
                hasVariant($state, 'badge', 'red'),
              [sty.slotTargetBadgeTextbadge_red_state_active_icon_expertLaptop]:
                hasVariant($state, 'icon', 'expertLaptop') &&
                hasVariant($state, 'badge', 'red') &&
                hasVariant($state, 'state', 'active'),
            }),
          })}
        </div>
      ) : null}

      <div
        data-plasmic-name={'tileIconAndText'}
        data-plasmic-override={overrides.tileIconAndText}
        className={classNames(projectcss.all, sty.tileIconAndText, {
          [sty.tileIconAndText___focusVisible]:
            triggers.focusVisible_tileWrapper,
          [sty.tileIconAndText___hover__notFocusVisible]:
            triggers.hoverNotFocusVisible_tileWrapper,
          [sty.tileIconAndTextbadge_red]: hasVariant($state, 'badge', 'red'),
          [sty.tileIconAndTextbadge_red_icon_expertLaptop]:
            hasVariant($state, 'icon', 'expertLaptop') &&
            hasVariant($state, 'badge', 'red'),
          [sty.tileIconAndTextbadge_red_state_active]:
            hasVariant($state, 'state', 'active') &&
            hasVariant($state, 'badge', 'red'),
          [sty.tileIconAndTextbadge_red_state_active_icon_expertLaptop]:
            hasVariant($state, 'icon', 'expertLaptop') &&
            hasVariant($state, 'badge', 'red') &&
            hasVariant($state, 'state', 'active'),
          [sty.tileIconAndTexticon_expertLaptop]: hasVariant(
            $state,
            'icon',
            'expertLaptop',
          ),
          [sty.tileIconAndTexticon_maximizeHand]: hasVariant(
            $state,
            'icon',
            'maximizeHand',
          ),
          [sty.tileIconAndTexticon_openSign]: hasVariant(
            $state,
            'icon',
            'openSign',
          ),
          [sty.tileIconAndTexticon_otherServiceLaptop]: hasVariant(
            $state,
            'icon',
            'otherServiceLaptop',
          ),
          [sty.tileIconAndTexticon_ownHome]: hasVariant(
            $state,
            'icon',
            'ownHome',
          ),
          [sty.tileIconAndTextstate_active]: hasVariant(
            $state,
            'state',
            'active',
          ),
          [sty.tileIconAndTextstate_active____focusVisible]:
            hasVariant($state, 'state', 'active') &&
            triggers.focusVisible_tileWrapper,
        })}
      >
        {(hasVariant($state, 'state', 'active') ? true : false) ? (
          <div
            data-plasmic-name={'checkMarkWrapper'}
            data-plasmic-override={overrides.checkMarkWrapper}
            className={classNames(projectcss.all, sty.checkMarkWrapper, {
              [sty.checkMarkWrapper___hover__notFocusVisible]:
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.checkMarkWrapper___hover__notFocusVisible_state_active]:
                hasVariant($state, 'state', 'active') &&
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.checkMarkWrapperbadge_red]: hasVariant(
                $state,
                'badge',
                'red',
              ),
              [sty.checkMarkWrapperbadge_red_state_active]:
                hasVariant($state, 'state', 'active') &&
                hasVariant($state, 'badge', 'red'),
              [sty.checkMarkWrapperbadge_red_state_active_icon_expertLaptop]:
                hasVariant($state, 'icon', 'expertLaptop') &&
                hasVariant($state, 'badge', 'red') &&
                hasVariant($state, 'state', 'active'),
              [sty.checkMarkWrapperstate_active]: hasVariant(
                $state,
                'state',
                'active',
              ),
              [sty.checkMarkWrapperstate_active____focusVisible]:
                hasVariant($state, 'state', 'active') &&
                triggers.focusVisible_tileWrapper,
            })}
          >
            <img
              alt={''}
              className={classNames(
                projectcss.all,
                projectcss.img,
                sty.img__zky,
                {
                  [sty.img___hover__notFocusVisible_state_active__zky5QaFhOHpg]:
                    hasVariant($state, 'state', 'active') &&
                    triggers.hoverNotFocusVisible_tileWrapper,
                  [sty.imgbadge_red_state_active__zkyA1JaiOHpg]:
                    hasVariant($state, 'state', 'active') &&
                    hasVariant($state, 'badge', 'red'),
                  [sty.imgbadge_red_state_active_icon_expertLaptop__zkyA1JaiOHpgShtM2]:
                    hasVariant($state, 'icon', 'expertLaptop') &&
                    hasVariant($state, 'badge', 'red') &&
                    hasVariant($state, 'state', 'active'),
                  [sty.imgstate_active____focusVisible__zkyOHpgLEkFt]:
                    hasVariant($state, 'state', 'active') &&
                    triggers.focusVisible_tileWrapper,
                  [sty.imgstate_active__zkyOHpg]: hasVariant(
                    $state,
                    'state',
                    'active',
                  ),
                },
              )}
              src={
                hasVariant($state, 'state', 'active')
                  ? greenCheckCircleKk7QrZzG64
                  : greenCheckCircleCompressedsvgDBulMnH98
              }
            />
          </div>
        ) : null}
        {(hasVariant($state, 'state', 'active') ? false : true) ? (
          <div
            data-plasmic-name={'tileIconWrapper'}
            data-plasmic-override={overrides.tileIconWrapper}
            className={classNames(projectcss.all, sty.tileIconWrapper, {
              [sty.tileIconWrapper___focusVisible]:
                triggers.focusVisible_tileWrapper,
              [sty.tileIconWrapper___hover__notFocusVisible]:
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.tileIconWrapperbadge_red]: hasVariant(
                $state,
                'badge',
                'red',
              ),
              [sty.tileIconWrapperbadge_red_icon_expertLaptop]:
                hasVariant($state, 'icon', 'expertLaptop') &&
                hasVariant($state, 'badge', 'red'),
              [sty.tileIconWrappericon_accountant]: hasVariant(
                $state,
                'icon',
                'accountant',
              ),
              [sty.tileIconWrappericon_chatBubble]: hasVariant(
                $state,
                'icon',
                'chatBubble',
              ),
              [sty.tileIconWrappericon_donateGiftBox]: hasVariant(
                $state,
                'icon',
                'donateGiftBox',
              ),
              [sty.tileIconWrappericon_expertLaptop]: hasVariant(
                $state,
                'icon',
                'expertLaptop',
              ),
              [sty.tileIconWrappericon_folderEmpty]: hasVariant(
                $state,
                'icon',
                'folderEmpty',
              ),
              [sty.tileIconWrappericon_openSign]: hasVariant(
                $state,
                'icon',
                'openSign',
              ),
              [sty.tileIconWrappericon_otherServiceLaptop]: hasVariant(
                $state,
                'icon',
                'otherServiceLaptop',
              ),
              [sty.tileIconWrappericon_ownHome]: hasVariant(
                $state,
                'icon',
                'ownHome',
              ),
              [sty.tileIconWrappericon_rentalProperty]: hasVariant(
                $state,
                'icon',
                'rentalProperty',
              ),
              [sty.tileIconWrappericon_stocksChart]: hasVariant(
                $state,
                'icon',
                'stocksChart',
              ),
              [sty.tileIconWrappericon_turboTaxFlag]: hasVariant(
                $state,
                'icon',
                'turboTaxFlag',
              ),
              [sty.tileIconWrappericon_unemployment]: hasVariant(
                $state,
                'icon',
                'unemployment',
              ),
              [sty.tileIconWrapperstate_active]: hasVariant(
                $state,
                'state',
                'active',
              ),
            })}
          >
            {(
              hasVariant($state, 'icon', 'turboTaxFlag')
                ? true
                : hasVariant($state, 'icon', 'folderEmpty')
                ? true
                : hasVariant($state, 'icon', 'accountant')
                ? true
                : hasVariant($state, 'icon', 'otherServiceLaptop')
                ? true
                : hasVariant($state, 'icon', 'rentalProperty')
                ? true
                : hasVariant($state, 'icon', 'openSign')
                ? true
                : true
            ) ? (
              <img
                alt={''}
                className={classNames(
                  projectcss.all,
                  projectcss.img,
                  sty.img__vRu7X,
                  {
                    [sty.img___focusVisible__vRu7XlEkFt]:
                      triggers.focusVisible_tileWrapper,
                    [sty.img___hover__notFocusVisible__vRu7X5QaFh]:
                      triggers.hoverNotFocusVisible_tileWrapper,
                    [sty.imgbadge_red__vRu7XA1Jai]: hasVariant(
                      $state,
                      'badge',
                      'red',
                    ),
                    [sty.imgbadge_red_icon_expertLaptop__vRu7XA1JaiShtM2]:
                      hasVariant($state, 'icon', 'expertLaptop') &&
                      hasVariant($state, 'badge', 'red'),
                    [sty.imgicon_accountant__vRu7XZ23Kf]: hasVariant(
                      $state,
                      'icon',
                      'accountant',
                    ),
                    [sty.imgicon_briefcaseMoney__vRu7XbPdwu]: hasVariant(
                      $state,
                      'icon',
                      'briefcaseMoney',
                    ),
                    [sty.imgicon_chatBubble__vRu7XuHhBm]: hasVariant(
                      $state,
                      'icon',
                      'chatBubble',
                    ),
                    [sty.imgicon_dependentsChildren__vRu7XrBnM9]: hasVariant(
                      $state,
                      'icon',
                      'dependentsChildren',
                    ),
                    [sty.imgicon_donateGiftBox__vRu7XBWqWc]: hasVariant(
                      $state,
                      'icon',
                      'donateGiftBox',
                    ),
                    [sty.imgicon_expertLaptop__vRu7XshtM2]: hasVariant(
                      $state,
                      'icon',
                      'expertLaptop',
                    ),
                    [sty.imgicon_folderEmpty__vRu7XgGwJ]: hasVariant(
                      $state,
                      'icon',
                      'folderEmpty',
                    ),
                    [sty.imgicon_freelancerLaptop__vRu7XpVvim]: hasVariant(
                      $state,
                      'icon',
                      'freelancerLaptop',
                    ),
                    [sty.imgicon_maximizeHand__vRu7XaOyu]: hasVariant(
                      $state,
                      'icon',
                      'maximizeHand',
                    ),
                    [sty.imgicon_openSign__vRu7XBc7Oc]: hasVariant(
                      $state,
                      'icon',
                      'openSign',
                    ),
                    [sty.imgicon_otherServiceLaptop__vRu7XX6OlE]: hasVariant(
                      $state,
                      'icon',
                      'otherServiceLaptop',
                    ),
                    [sty.imgicon_ownHome__vRu7XUnJfX]: hasVariant(
                      $state,
                      'icon',
                      'ownHome',
                    ),
                    [sty.imgicon_rentSign__vRu7XganNy]: hasVariant(
                      $state,
                      'icon',
                      'rentSign',
                    ),
                    [sty.imgicon_rentalProperty__vRu7XFnvJg]: hasVariant(
                      $state,
                      'icon',
                      'rentalProperty',
                    ),
                    [sty.imgicon_stocksChart__vRu7XOsIv9]: hasVariant(
                      $state,
                      'icon',
                      'stocksChart',
                    ),
                    [sty.imgicon_studentLoans2__vRu7XnKb9T]: hasVariant(
                      $state,
                      'icon',
                      'studentLoans2',
                    ),
                    [sty.imgicon_studentLoans__vRu7XupxDt]: hasVariant(
                      $state,
                      'icon',
                      'studentLoans',
                    ),
                    [sty.imgicon_turboTaxFlag__vRu7XKqYj3]: hasVariant(
                      $state,
                      'icon',
                      'turboTaxFlag',
                    ),
                    [sty.imgicon_unemployment__vRu7XhIjYl]: hasVariant(
                      $state,
                      'icon',
                      'unemployment',
                    ),
                  },
                )}
                src={
                  hasVariant($state, 'icon', 'donateGiftBox')
                    ? donateGiftBoxXtGwCAiTk8
                    : hasVariant($state, 'icon', 'chatBubble')
                    ? ttlChatBubbleVztKpt9M4R
                    : hasVariant($state, 'icon', 'dependentsChildren')
                    ? dependentsChildrenCompressedsvgQNljoCioi
                    : hasVariant($state, 'icon', 'rentSign')
                    ? rentGQCxCeZbji
                    : hasVariant($state, 'icon', 'briefcaseMoney')
                    ? briefcaseQhGjDnpk5G
                    : hasVariant($state, 'icon', 'maximizeHand')
                    ? maximizeTaxCreditsT7V6CQvQa
                    : hasVariant($state, 'icon', 'ownHome')
                    ? ownHomeX4ZjKqr5Zu
                    : hasVariant($state, 'icon', 'unemployment')
                    ? unemployedQHNbUs1LJ
                    : hasVariant($state, 'icon', 'studentLoans2')
                    ? gradCapStudent2IImOdR4P3
                    : hasVariant($state, 'icon', 'turboTaxFlag')
                    ? turboTaxFlagW5W2RVie8U
                    : hasVariant($state, 'icon', 'folderEmpty')
                    ? folderEmpty96Je3ThU56E
                    : hasVariant($state, 'icon', 'accountant')
                    ? accountantExpertFojZVnMXk
                    : hasVariant($state, 'icon', 'otherServiceLaptop')
                    ? otherServiceLaptopBOwYhafOA7
                    : hasVariant($state, 'icon', 'rentalProperty')
                    ? rentalPropertyDQvZrf6Qe15
                    : hasVariant($state, 'icon', 'expertLaptop')
                    ? ttlfsVM1Ormmm3W
                    : hasVariant($state, 'icon', 'openSign')
                    ? openSignSZuP6XSoxj
                    : hasVariant($state, 'icon', 'freelancerLaptop')
                    ? selfEmployedCompressedsvgSXK1EuQm
                    : hasVariant($state, 'icon', 'stocksChart')
                    ? stockChart3SerdvdLaI
                    : hasVariant($state, 'icon', 'studentLoans')
                    ? gradCapStudentX2JivTgRIa
                    : unemployedCompressedsvgCS4L5QtP
                }
              />
            ) : null}
          </div>
        ) : null}

        <div
          data-plasmic-name={'tileTextWrapper'}
          data-plasmic-override={overrides.tileTextWrapper}
          className={classNames(projectcss.all, sty.tileTextWrapper, {
            [sty.tileTextWrapper___focusVisible]:
              triggers.focusVisible_tileWrapper,
            [sty.tileTextWrapper___hover__notFocusVisible]:
              triggers.hoverNotFocusVisible_tileWrapper,
            [sty.tileTextWrapper___hover__notFocusVisible_state_active]:
              hasVariant($state, 'state', 'active') &&
              triggers.hoverNotFocusVisible_tileWrapper,
            [sty.tileTextWrapperbadge_red]: hasVariant($state, 'badge', 'red'),
            [sty.tileTextWrapperbadge_red_state_active]:
              hasVariant($state, 'state', 'active') &&
              hasVariant($state, 'badge', 'red'),
            [sty.tileTextWrappericon_expertLaptop]: hasVariant(
              $state,
              'icon',
              'expertLaptop',
            ),
            [sty.tileTextWrappericon_folderEmpty]: hasVariant(
              $state,
              'icon',
              'folderEmpty',
            ),
            [sty.tileTextWrappericon_freelancerLaptop]: hasVariant(
              $state,
              'icon',
              'freelancerLaptop',
            ),
            [sty.tileTextWrappericon_studentLoans2]: hasVariant(
              $state,
              'icon',
              'studentLoans2',
            ),
            [sty.tileTextWrapperstate_active]: hasVariant(
              $state,
              'state',
              'active',
            ),
            [sty.tileTextWrapperstate_active____focusVisible]:
              hasVariant($state, 'state', 'active') &&
              triggers.focusVisible_tileWrapper,
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a94Lv,
                )}
              >
                <p.Trans>{'I want a tax expert to do my taxes for me'}</p.Trans>
              </div>
            ),

            value: args.text,
            className: classNames(sty.slotTargetText, {
              [sty.slotTargetText___focusVisible]:
                triggers.focusVisible_tileWrapper,
              [sty.slotTargetText___hover__notFocusVisible]:
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.slotTargetText___hover__notFocusVisible_state_active]:
                hasVariant($state, 'state', 'active') &&
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.slotTargetTextbadge_red_state_active]:
                hasVariant($state, 'state', 'active') &&
                hasVariant($state, 'badge', 'red'),
              [sty.slotTargetTexticon_folderEmpty]: hasVariant(
                $state,
                'icon',
                'folderEmpty',
              ),
              [sty.slotTargetTexticon_maximizeHand]: hasVariant(
                $state,
                'icon',
                'maximizeHand',
              ),
              [sty.slotTargetTexticon_otherServiceLaptop]: hasVariant(
                $state,
                'icon',
                'otherServiceLaptop',
              ),
              [sty.slotTargetTexticon_rentalProperty]: hasVariant(
                $state,
                'icon',
                'rentalProperty',
              ),
              [sty.slotTargetTexticon_stocksChart]: hasVariant(
                $state,
                'icon',
                'stocksChart',
              ),
              [sty.slotTargetTexticon_studentLoans2]: hasVariant(
                $state,
                'icon',
                'studentLoans2',
              ),
              [sty.slotTargetTexticon_turboTaxFlag]: hasVariant(
                $state,
                'icon',
                'turboTaxFlag',
              ),
              [sty.slotTargetTexticon_unemployment]: hasVariant(
                $state,
                'icon',
                'unemployment',
              ),
              [sty.slotTargetTextstate_active]: hasVariant(
                $state,
                'state',
                'active',
              ),
              [sty.slotTargetTextstate_active____focusVisible]:
                hasVariant($state, 'state', 'active') &&
                triggers.focusVisible_tileWrapper,
            }),
          })}
        </div>
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tileWrapper: [
    'tileWrapper',
    'badgeWrapper',
    'tileIconAndText',
    'checkMarkWrapper',
    'tileIconWrapper',
    'tileTextWrapper',
  ],
  badgeWrapper: ['badgeWrapper'],
  tileIconAndText: [
    'tileIconAndText',
    'checkMarkWrapper',
    'tileIconWrapper',
    'tileTextWrapper',
  ],
  checkMarkWrapper: ['checkMarkWrapper'],
  tileIconWrapper: ['tileIconWrapper'],
  tileTextWrapper: ['tileTextWrapper'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tileWrapper: 'button';
  badgeWrapper: 'div';
  tileIconAndText: 'div';
  checkMarkWrapper: 'div';
  tileIconWrapper: 'div';
  tileTextWrapper: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTile__VariantsArgs;
    args?: PlasmicTile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTile__ArgProps,
          internalVariantPropNames: PlasmicTile__VariantProps,
        }),
      [props, nodeName],
    );

    return PlasmicTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'tileWrapper') {
    func.displayName = 'PlasmicTile';
  } else {
    func.displayName = `PlasmicTile.${nodeName}`;
  }
  return func;
}

export const PlasmicTile = Object.assign(
  // Top-level PlasmicTile renders the root element
  makeNodeComponent('tileWrapper'),
  {
    // Helper components rendering sub-elements
    badgeWrapper: makeNodeComponent('badgeWrapper'),
    tileIconAndText: makeNodeComponent('tileIconAndText'),
    checkMarkWrapper: makeNodeComponent('checkMarkWrapper'),
    tileIconWrapper: makeNodeComponent('tileIconWrapper'),
    tileTextWrapper: makeNodeComponent('tileTextWrapper'),

    // Metadata about props expected for PlasmicTile
    internalVariantProps: PlasmicTile__VariantProps,
    internalArgProps: PlasmicTile__ArgProps,
  },
);

export default PlasmicTile;
/* prettier-ignore-end */
