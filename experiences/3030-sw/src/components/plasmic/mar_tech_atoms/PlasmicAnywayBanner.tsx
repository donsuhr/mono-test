// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWL5f4gAFbwKhEp4ZCgaRf
// Component: CZzWE3lFqUM
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import { useScreenVariants as useScreenVariantsstZftwTu2YA } from './PlasmicGlobalVariant__Screen'; // plasmic-import: StZftwTu2yA/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_mar_tech_atoms.module.css'; // plasmic-import: bWL5f4gAFbwKhEp4ZCgaRf/projectcss
import sty from './PlasmicAnywayBanner.module.css'; // plasmic-import: CZzWE3lFqUM/css

import anywayAngelaCompressedpngFcQx5Wzx4 from './images/anywayAngelaCompressedpng.png'; // plasmic-import: fcQX5Wzx4/picture

export type PlasmicAnywayBanner__VariantMembers = {};
export type PlasmicAnywayBanner__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnywayBanner__VariantsArgs;
export const PlasmicAnywayBanner__VariantProps = new Array<VariantPropType>();

export type PlasmicAnywayBanner__ArgsType = {
  text?: React.ReactNode;
  simpleOnlyLink?: React.ReactNode;
  mustFileByLink?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAnywayBanner__ArgsType;
export const PlasmicAnywayBanner__ArgProps = new Array<ArgPropType>(
  'text',
  'simpleOnlyLink',
  'mustFileByLink',
);

export type PlasmicAnywayBanner__OverridesType = {
  root?: p.Flex<'div'>;
  whiteBg?: p.Flex<'div'>;
  text?: p.Flex<'div'>;
  img?: p.Flex<'img'>;
};

export interface DefaultAnywayBannerProps {
  text?: React.ReactNode;
  simpleOnlyLink?: React.ReactNode;
  mustFileByLink?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAnywayBanner__RenderFunc(props: {
  variants: PlasmicAnywayBanner__VariantsArgs;
  args: PlasmicAnywayBanner__ArgsType;
  overrides: PlasmicAnywayBanner__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsstZftwTu2YA(),
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___9BdJ)}>
        <div
          data-plasmic-name={'whiteBg'}
          data-plasmic-override={overrides.whiteBg}
          className={classNames(projectcss.all, sty.whiteBg)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___0Ab8V)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.Trans>
                  {
                    'New! File FREE: On your own, with expert help, or when an expert does your taxes'
                  }
                </p.Trans>
              ),
              value: args.text,
              className: classNames(sty.slotTargetText),
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__uwqwU)}>
            {p.renderPlasmicSlot({
              defaultContents: <p.Trans>{'Simple tax returns only'}</p.Trans>,
              value: args.simpleOnlyLink,
              className: classNames(sty.slotTargetSimpleOnlyLink),
            })}

            <div
              data-plasmic-name={'text'}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
              )}
            >
              <p.Trans>{' | '}</p.Trans>
            </div>

            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4SoLk,
                  )}
                >
                  <p.Trans>{'Must file by 3/31'}</p.Trans>
                </div>
              ),

              value: args.mustFileByLink,
              className: classNames(sty.slotTargetMustFileByLink),
            })}
          </div>
        </div>

        <img
          data-plasmic-name={'img'}
          data-plasmic-override={overrides.img}
          alt={''}
          className={classNames(projectcss.all, projectcss.img, sty.img)}
          loading={'lazy' as const}
          src={anywayAngelaCompressedpngFcQx5Wzx4}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'whiteBg', 'text', 'img'],
  whiteBg: ['whiteBg', 'text'],
  text: ['text'],
  img: ['img'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  whiteBg: 'div';
  text: 'div';
  img: 'img';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnywayBanner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnywayBanner__VariantsArgs;
    args?: PlasmicAnywayBanner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnywayBanner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAnywayBanner__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAnywayBanner__ArgProps,
          internalVariantPropNames: PlasmicAnywayBanner__VariantProps,
        }),
      [props, nodeName],
    );

    return PlasmicAnywayBanner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicAnywayBanner';
  } else {
    func.displayName = `PlasmicAnywayBanner.${nodeName}`;
  }
  return func;
}

export const PlasmicAnywayBanner = Object.assign(
  // Top-level PlasmicAnywayBanner renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    whiteBg: makeNodeComponent('whiteBg'),
    text: makeNodeComponent('text'),
    img: makeNodeComponent('img'),

    // Metadata about props expected for PlasmicAnywayBanner
    internalVariantProps: PlasmicAnywayBanner__VariantProps,
    internalArgProps: PlasmicAnywayBanner__ArgProps,
  },
);

export default PlasmicAnywayBanner;
/* prettier-ignore-end */
