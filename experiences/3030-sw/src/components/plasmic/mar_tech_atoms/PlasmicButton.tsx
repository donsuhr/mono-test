// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWL5f4gAFbwKhEp4ZCgaRf
// Component: 0Oj8jY18DH
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_mar_tech_atoms.module.css'; // plasmic-import: bWL5f4gAFbwKhEp4ZCgaRf/projectcss
import sty from './PlasmicButton.module.css'; // plasmic-import: 0Oj8jY18DH/css

import BackCaretIcon from './icons/PlasmicIcon__BackCaret'; // plasmic-import: sqEX5UnJbc/icon

export type PlasmicButton__VariantMembers = {
  theme:
    | 'upgrade'
    | 'secondary'
    | 'back'
    | 'next'
    | 'ttLive'
    | 'primary'
    | 'passiveSolid'
    | 'passiveGhost'
    | 'destructive'
    | 'diy'
    | 'passiveNoOutlineTeal01'
    | 'passiveNoOutlineBlue01'
    | 'passiveNoOutlineRed02'
    | 'ttLiveFullService'
    | 'secondaryTtl'
    | 'secondaryFs'
    | 'teal01'
    | 'blue05'
    | 'gray01'
    | 'recommendedMobile';
  fullWidth: 'fullWidth';
  hasSubtext: 'hasSubtext';
  matchSubtextHeight: 'matchSubtextHeight';
};
export type PlasmicButton__VariantsArgs = {
  theme?: SingleChoiceArg<
    | 'upgrade'
    | 'secondary'
    | 'back'
    | 'next'
    | 'ttLive'
    | 'primary'
    | 'passiveSolid'
    | 'passiveGhost'
    | 'destructive'
    | 'diy'
    | 'passiveNoOutlineTeal01'
    | 'passiveNoOutlineBlue01'
    | 'passiveNoOutlineRed02'
    | 'ttLiveFullService'
    | 'secondaryTtl'
    | 'secondaryFs'
    | 'teal01'
    | 'blue05'
    | 'gray01'
    | 'recommendedMobile'
  >;
  fullWidth?: SingleBooleanChoiceArg<'fullWidth'>;
  hasSubtext?: SingleBooleanChoiceArg<'hasSubtext'>;
  matchSubtextHeight?: SingleBooleanChoiceArg<'matchSubtextHeight'>;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  'theme',
  'fullWidth',
  'hasSubtext',
  'matchSubtextHeight',
);

export type PlasmicButton__ArgsType = {
  text?: React.ReactNode;
  subtext?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  'text',
  'subtext',
);

export type PlasmicButton__OverridesType = {
  buttonWrapper?: p.Flex<'button'>;
  contentsWrapper?: p.Flex<'div'>;
  textWrapper?: p.Flex<'div'>;
  backArrow?: p.Flex<'svg'>;
  forwardArrow?: p.Flex<'svg'>;
  subTextWrapper?: p.Flex<'div'>;
};

export interface DefaultButtonProps {
  text?: React.ReactNode;
  subtext?: React.ReactNode;
  theme?: SingleChoiceArg<
    | 'upgrade'
    | 'secondary'
    | 'back'
    | 'next'
    | 'ttLive'
    | 'primary'
    | 'passiveSolid'
    | 'passiveGhost'
    | 'destructive'
    | 'diy'
    | 'passiveNoOutlineTeal01'
    | 'passiveNoOutlineBlue01'
    | 'passiveNoOutlineRed02'
    | 'ttLiveFullService'
    | 'secondaryTtl'
    | 'secondaryFs'
    | 'teal01'
    | 'blue05'
    | 'gray01'
    | 'recommendedMobile'
  >;
  fullWidth?: SingleBooleanChoiceArg<'fullWidth'>;
  hasSubtext?: SingleBooleanChoiceArg<'hasSubtext'>;
  matchSubtextHeight?: SingleBooleanChoiceArg<'matchSubtextHeight'>;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'theme',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.theme
          : undefined,
      },
      {
        path: 'fullWidth',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.fullWidth
          : undefined,
      },
      {
        path: 'hasSubtext',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.hasSubtext
          : undefined,
      },
      {
        path: 'matchSubtextHeight',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.matchSubtextHeight
          : undefined,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <button
      data-plasmic-name={'buttonWrapper'}
      data-plasmic-override={overrides.buttonWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.buttonWrapper,
        {
          [sty.buttonWrapperfullWidth]: hasVariant(
            $state,
            'fullWidth',
            'fullWidth',
          ),
          [sty.buttonWrapperhasSubtext]: hasVariant(
            $state,
            'hasSubtext',
            'hasSubtext',
          ),
          [sty.buttonWrappermatchSubtextHeight]: hasVariant(
            $state,
            'matchSubtextHeight',
            'matchSubtextHeight',
          ),
          [sty.buttonWrappertheme_back]: hasVariant($state, 'theme', 'back'),
          [sty.buttonWrappertheme_blue05]: hasVariant(
            $state,
            'theme',
            'blue05',
          ),
          [sty.buttonWrappertheme_destructive]: hasVariant(
            $state,
            'theme',
            'destructive',
          ),
          [sty.buttonWrappertheme_diy]: hasVariant($state, 'theme', 'diy'),
          [sty.buttonWrappertheme_gray01]: hasVariant(
            $state,
            'theme',
            'gray01',
          ),
          [sty.buttonWrappertheme_next]: hasVariant($state, 'theme', 'next'),
          [sty.buttonWrappertheme_passiveGhost]: hasVariant(
            $state,
            'theme',
            'passiveGhost',
          ),
          [sty.buttonWrappertheme_passiveNoOutlineBlue01]: hasVariant(
            $state,
            'theme',
            'passiveNoOutlineBlue01',
          ),
          [sty.buttonWrappertheme_passiveNoOutlineRed02]: hasVariant(
            $state,
            'theme',
            'passiveNoOutlineRed02',
          ),
          [sty.buttonWrappertheme_passiveNoOutlineTeal01]: hasVariant(
            $state,
            'theme',
            'passiveNoOutlineTeal01',
          ),
          [sty.buttonWrappertheme_passiveSolid]: hasVariant(
            $state,
            'theme',
            'passiveSolid',
          ),
          [sty.buttonWrappertheme_primary]: hasVariant(
            $state,
            'theme',
            'primary',
          ),
          [sty.buttonWrappertheme_recommendedMobile]: hasVariant(
            $state,
            'theme',
            'recommendedMobile',
          ),
          [sty.buttonWrappertheme_secondaryFs]: hasVariant(
            $state,
            'theme',
            'secondaryFs',
          ),
          [sty.buttonWrappertheme_secondaryTtl]: hasVariant(
            $state,
            'theme',
            'secondaryTtl',
          ),
          [sty.buttonWrappertheme_secondary]: hasVariant(
            $state,
            'theme',
            'secondary',
          ),
          [sty.buttonWrappertheme_teal01]: hasVariant(
            $state,
            'theme',
            'teal01',
          ),
          [sty.buttonWrappertheme_ttLiveFullService]: hasVariant(
            $state,
            'theme',
            'ttLiveFullService',
          ),
          [sty.buttonWrappertheme_ttLive]: hasVariant(
            $state,
            'theme',
            'ttLive',
          ),
          [sty.buttonWrappertheme_upgrade]: hasVariant(
            $state,
            'theme',
            'upgrade',
          ),
        },
      )}
      ref={(ref) => {
        $refs['buttonWrapper'] = ref;
      }}
    >
      <div
        data-plasmic-name={'contentsWrapper'}
        data-plasmic-override={overrides.contentsWrapper}
        className={classNames(projectcss.all, sty.contentsWrapper, {
          [sty.contentsWrapperfullWidth]: hasVariant(
            $state,
            'fullWidth',
            'fullWidth',
          ),
          [sty.contentsWrappertheme_back]: hasVariant($state, 'theme', 'back'),
          [sty.contentsWrappertheme_gray01]: hasVariant(
            $state,
            'theme',
            'gray01',
          ),
          [sty.contentsWrappertheme_next]: hasVariant($state, 'theme', 'next'),
          [sty.contentsWrappertheme_passiveNoOutlineRed02]: hasVariant(
            $state,
            'theme',
            'passiveNoOutlineRed02',
          ),
          [sty.contentsWrappertheme_secondaryTtl]: hasVariant(
            $state,
            'theme',
            'secondaryTtl',
          ),
          [sty.contentsWrappertheme_secondary]: hasVariant(
            $state,
            'theme',
            'secondary',
          ),
          [sty.contentsWrappertheme_ttLiveFullService]: hasVariant(
            $state,
            'theme',
            'ttLiveFullService',
          ),
        })}
      >
        <div
          data-plasmic-name={'textWrapper'}
          data-plasmic-override={overrides.textWrapper}
          className={classNames(projectcss.all, sty.textWrapper, {
            [sty.textWrapperfullWidth]: hasVariant(
              $state,
              'fullWidth',
              'fullWidth',
            ),
            [sty.textWrapperhasSubtext]: hasVariant(
              $state,
              'hasSubtext',
              'hasSubtext',
            ),
            [sty.textWrappermatchSubtextHeight]: hasVariant(
              $state,
              'matchSubtextHeight',
              'matchSubtextHeight',
            ),
            [sty.textWrappertheme_back]: hasVariant($state, 'theme', 'back'),
            [sty.textWrappertheme_destructive]: hasVariant(
              $state,
              'theme',
              'destructive',
            ),
            [sty.textWrappertheme_diy]: hasVariant($state, 'theme', 'diy'),
            [sty.textWrappertheme_next]: hasVariant($state, 'theme', 'next'),
            [sty.textWrappertheme_passiveGhost]: hasVariant(
              $state,
              'theme',
              'passiveGhost',
            ),
            [sty.textWrappertheme_passiveNoOutlineBlue01]: hasVariant(
              $state,
              'theme',
              'passiveNoOutlineBlue01',
            ),
            [sty.textWrappertheme_passiveNoOutlineRed02]: hasVariant(
              $state,
              'theme',
              'passiveNoOutlineRed02',
            ),
            [sty.textWrappertheme_passiveNoOutlineTeal01]: hasVariant(
              $state,
              'theme',
              'passiveNoOutlineTeal01',
            ),
            [sty.textWrappertheme_passiveSolid]: hasVariant(
              $state,
              'theme',
              'passiveSolid',
            ),
            [sty.textWrappertheme_primary]: hasVariant(
              $state,
              'theme',
              'primary',
            ),
            [sty.textWrappertheme_recommendedMobile]: hasVariant(
              $state,
              'theme',
              'recommendedMobile',
            ),
            [sty.textWrappertheme_secondaryTtl]: hasVariant(
              $state,
              'theme',
              'secondaryTtl',
            ),
            [sty.textWrappertheme_secondary]: hasVariant(
              $state,
              'theme',
              'secondary',
            ),
            [sty.textWrappertheme_teal01]: hasVariant(
              $state,
              'theme',
              'teal01',
            ),
            [sty.textWrappertheme_ttLiveFullService]: hasVariant(
              $state,
              'theme',
              'ttLiveFullService',
            ),
            [sty.textWrappertheme_ttLive]: hasVariant(
              $state,
              'theme',
              'ttLive',
            ),
            [sty.textWrappertheme_upgrade]: hasVariant(
              $state,
              'theme',
              'upgrade',
            ),
          })}
        >
          {(
            hasVariant($state, 'theme', 'next')
              ? true
              : hasVariant($state, 'theme', 'back')
              ? true
              : true
          ) ? (
            <BackCaretIcon
              data-plasmic-name={'backArrow'}
              data-plasmic-override={overrides.backArrow}
              aria-label={'back arrow' as const}
              className={classNames(projectcss.all, sty.backArrow, {
                [sty.backArrowtheme_back]: hasVariant($state, 'theme', 'back'),
                [sty.backArrowtheme_next]: hasVariant($state, 'theme', 'next'),
                [sty.backArrowtheme_recommendedMobile]: hasVariant(
                  $state,
                  'theme',
                  'recommendedMobile',
                ),
                [sty.backArrowtheme_upgrade]: hasVariant(
                  $state,
                  'theme',
                  'upgrade',
                ),
              })}
              role={'img'}
            />
          ) : null}
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d0NAz,
                )}
              >
                <p.Trans>{'text'}</p.Trans>
              </div>
            ),

            value: args.text,
            className: classNames(sty.slotTargetText, {
              [sty.slotTargetTextfullWidth]: hasVariant(
                $state,
                'fullWidth',
                'fullWidth',
              ),
              [sty.slotTargetTexthasSubtext]: hasVariant(
                $state,
                'hasSubtext',
                'hasSubtext',
              ),
              [sty.slotTargetTextmatchSubtextHeight]: hasVariant(
                $state,
                'matchSubtextHeight',
                'matchSubtextHeight',
              ),
              [sty.slotTargetTexttheme_back]: hasVariant(
                $state,
                'theme',
                'back',
              ),
              [sty.slotTargetTexttheme_diy]: hasVariant($state, 'theme', 'diy'),
              [sty.slotTargetTexttheme_next]: hasVariant(
                $state,
                'theme',
                'next',
              ),
              [sty.slotTargetTexttheme_passiveGhost]: hasVariant(
                $state,
                'theme',
                'passiveGhost',
              ),
              [sty.slotTargetTexttheme_passiveNoOutlineBlue01]: hasVariant(
                $state,
                'theme',
                'passiveNoOutlineBlue01',
              ),
              [sty.slotTargetTexttheme_passiveNoOutlineRed02]: hasVariant(
                $state,
                'theme',
                'passiveNoOutlineRed02',
              ),
              [sty.slotTargetTexttheme_passiveNoOutlineTeal01]: hasVariant(
                $state,
                'theme',
                'passiveNoOutlineTeal01',
              ),
              [sty.slotTargetTexttheme_passiveSolid]: hasVariant(
                $state,
                'theme',
                'passiveSolid',
              ),
              [sty.slotTargetTexttheme_primary]: hasVariant(
                $state,
                'theme',
                'primary',
              ),
              [sty.slotTargetTexttheme_recommendedMobile]: hasVariant(
                $state,
                'theme',
                'recommendedMobile',
              ),
              [sty.slotTargetTexttheme_secondaryFs]: hasVariant(
                $state,
                'theme',
                'secondaryFs',
              ),
              [sty.slotTargetTexttheme_secondaryTtl]: hasVariant(
                $state,
                'theme',
                'secondaryTtl',
              ),
              [sty.slotTargetTexttheme_secondary]: hasVariant(
                $state,
                'theme',
                'secondary',
              ),
              [sty.slotTargetTexttheme_ttLiveFullService]: hasVariant(
                $state,
                'theme',
                'ttLiveFullService',
              ),
              [sty.slotTargetTexttheme_ttLive]: hasVariant(
                $state,
                'theme',
                'ttLive',
              ),
              [sty.slotTargetTexttheme_upgrade]: hasVariant(
                $state,
                'theme',
                'upgrade',
              ),
            }),
          })}
          {(
            hasVariant($state, 'theme', 'next')
              ? true
              : hasVariant($state, 'theme', 'back')
              ? true
              : true
          ) ? (
            <BackCaretIcon
              data-plasmic-name={'forwardArrow'}
              data-plasmic-override={overrides.forwardArrow}
              aria-label={'forward arrow' as const}
              className={classNames(projectcss.all, sty.forwardArrow, {
                [sty.forwardArrowtheme_back]: hasVariant(
                  $state,
                  'theme',
                  'back',
                ),
                [sty.forwardArrowtheme_next]: hasVariant(
                  $state,
                  'theme',
                  'next',
                ),
              })}
              role={'img'}
            />
          ) : null}
        </div>

        {(
          hasVariant($state, 'theme', 'next')
            ? true
            : hasVariant($state, 'hasSubtext', 'hasSubtext')
            ? true
            : false
        ) ? (
          <div
            data-plasmic-name={'subTextWrapper'}
            data-plasmic-override={overrides.subTextWrapper}
            className={classNames(projectcss.all, sty.subTextWrapper, {
              [sty.subTextWrapperhasSubtext]: hasVariant(
                $state,
                'hasSubtext',
                'hasSubtext',
              ),
              [sty.subTextWrappertheme_next]: hasVariant(
                $state,
                'theme',
                'next',
              ),
              [sty.subTextWrappertheme_passiveNoOutlineBlue01]: hasVariant(
                $state,
                'theme',
                'passiveNoOutlineBlue01',
              ),
              [sty.subTextWrappertheme_passiveNoOutlineRed02]: hasVariant(
                $state,
                'theme',
                'passiveNoOutlineRed02',
              ),
              [sty.subTextWrappertheme_recommendedMobile]: hasVariant(
                $state,
                'theme',
                'recommendedMobile',
              ),
              [sty.subTextWrappertheme_upgrade]: hasVariant(
                $state,
                'theme',
                'upgrade',
              ),
            })}
          >
            {(hasVariant($state, 'theme', 'next') ? true : true)
              ? p.renderPlasmicSlot({
                  defaultContents: <p.Trans>{''}</p.Trans>,
                  value: args.subtext,
                  className: classNames(sty.slotTargetSubtext, {
                    [sty.slotTargetSubtexthasSubtext]: hasVariant(
                      $state,
                      'hasSubtext',
                      'hasSubtext',
                    ),
                    [sty.slotTargetSubtexttheme_next]: hasVariant(
                      $state,
                      'theme',
                      'next',
                    ),
                    [sty.slotTargetSubtexttheme_passiveNoOutlineBlue01]:
                      hasVariant($state, 'theme', 'passiveNoOutlineBlue01'),
                    [sty.slotTargetSubtexttheme_passiveNoOutlineRed02]:
                      hasVariant($state, 'theme', 'passiveNoOutlineRed02'),
                    [sty.slotTargetSubtexttheme_passiveNoOutlineTeal01]:
                      hasVariant($state, 'theme', 'passiveNoOutlineTeal01'),
                  }),
                })
              : null}
          </div>
        ) : null}
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  buttonWrapper: [
    'buttonWrapper',
    'contentsWrapper',
    'textWrapper',
    'backArrow',
    'forwardArrow',
    'subTextWrapper',
  ],
  contentsWrapper: [
    'contentsWrapper',
    'textWrapper',
    'backArrow',
    'forwardArrow',
    'subTextWrapper',
  ],
  textWrapper: ['textWrapper', 'backArrow', 'forwardArrow'],
  backArrow: ['backArrow'],
  forwardArrow: ['forwardArrow'],
  subTextWrapper: ['subTextWrapper'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  buttonWrapper: 'button';
  contentsWrapper: 'div';
  textWrapper: 'div';
  backArrow: 'svg';
  forwardArrow: 'svg';
  subTextWrapper: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps,
        }),
      [props, nodeName],
    );

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'buttonWrapper') {
    func.displayName = 'PlasmicButton';
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent('buttonWrapper'),
  {
    // Helper components rendering sub-elements
    contentsWrapper: makeNodeComponent('contentsWrapper'),
    textWrapper: makeNodeComponent('textWrapper'),
    backArrow: makeNodeComponent('backArrow'),
    forwardArrow: makeNodeComponent('forwardArrow'),
    subTextWrapper: makeNodeComponent('subTextWrapper'),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
  },
);

export default PlasmicButton;
/* prettier-ignore-end */
