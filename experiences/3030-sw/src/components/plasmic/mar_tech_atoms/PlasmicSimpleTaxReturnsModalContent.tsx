// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWL5f4gAFbwKhEp4ZCgaRf
// Component: yR0DgW6iTeM
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_mar_tech_atoms.module.css'; // plasmic-import: bWL5f4gAFbwKhEp4ZCgaRf/projectcss
import sty from './PlasmicSimpleTaxReturnsModalContent.module.css'; // plasmic-import: yR0DgW6iTeM/css

export type PlasmicSimpleTaxReturnsModalContent__VariantMembers = {};
export type PlasmicSimpleTaxReturnsModalContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicSimpleTaxReturnsModalContent__VariantsArgs;
export const PlasmicSimpleTaxReturnsModalContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSimpleTaxReturnsModalContent__ArgsType = {
  heading1?: React.ReactNode;
  headingIntro1?: React.ReactNode;
  listHeading1?: React.ReactNode;
  list1?: React.ReactNode;
  listHeading2?: React.ReactNode;
  list2?: React.ReactNode;
  subText?: React.ReactNode;
  heading2?: React.ReactNode;
  headingIntro2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSimpleTaxReturnsModalContent__ArgsType;
export const PlasmicSimpleTaxReturnsModalContent__ArgProps =
  new Array<ArgPropType>(
    'heading1',
    'headingIntro1',
    'listHeading1',
    'list1',
    'listHeading2',
    'list2',
    'subText',
    'heading2',
    'headingIntro2',
  );

export type PlasmicSimpleTaxReturnsModalContent__OverridesType = {
  root?: p.Flex<'div'>;
  title?: p.Flex<'h3'>;
  introPara?: p.Flex<'p'>;
  coveredSection?: p.Flex<'div'>;
  coveredHeading?: p.Flex<'div'>;
  coveredList?: p.Flex<'div'>;
  notCoveredSection?: p.Flex<'div'>;
  notCoveredHeading?: p.Flex<'div'>;
  notCoveredList?: p.Flex<'div'>;
  moneySection?: p.Flex<'div'>;
  moneyHeading?: p.Flex<'div'>;
};

export interface DefaultSimpleTaxReturnsModalContentProps {
  heading1?: React.ReactNode;
  headingIntro1?: React.ReactNode;
  listHeading1?: React.ReactNode;
  list1?: React.ReactNode;
  listHeading2?: React.ReactNode;
  list2?: React.ReactNode;
  subText?: React.ReactNode;
  heading2?: React.ReactNode;
  headingIntro2?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSimpleTaxReturnsModalContent__RenderFunc(props: {
  variants: PlasmicSimpleTaxReturnsModalContent__VariantsArgs;
  args: PlasmicSimpleTaxReturnsModalContent__ArgsType;
  overrides: PlasmicSimpleTaxReturnsModalContent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
      )}
    >
      <h3
        data-plasmic-name={'title'}
        data-plasmic-override={overrides.title}
        className={classNames(projectcss.all, projectcss.h3, sty.title)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.Trans>{'What qualifies as a simple tax return?'}</p.Trans>
          ),
          value: args.heading1,
          className: classNames(sty.slotTargetHeading1),
        })}
      </h3>

      <p
        data-plasmic-name={'introPara'}
        data-plasmic-override={overrides.introPara}
        className={classNames(projectcss.all, projectcss.p, sty.introPara)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.Trans>
              {
                "If you have a simple tax return, you can file for free with TurboTax Free Edition or TurboTax Live Assisted Basic. You can also file with TurboTax Live Full Service Basic at the listed price. A simple tax return is one that's filed using IRS Form 1040 only, without having to attach any forms or schedules. Only certain taxpayers are eligible."
              }
            </p.Trans>
          ),
          value: args.headingIntro1,
          className: classNames(sty.slotTargetHeadingIntro1),
        })}
      </p>

      <div
        data-plasmic-name={'coveredSection'}
        data-plasmic-override={overrides.coveredSection}
        className={classNames(projectcss.all, sty.coveredSection)}
      >
        <div
          data-plasmic-name={'coveredHeading'}
          data-plasmic-override={overrides.coveredHeading}
          className={classNames(projectcss.all, sty.coveredHeading)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s4O8V,
                )}
              >
                <p.Trans>
                  {
                    <React.Fragment>
                      <React.Fragment>{''}</React.Fragment>
                      {
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__ncwXt,
                          )}
                        >
                          {
                            'Situations covered (assuming no added tax complexity):'
                          }
                        </h4>
                      }
                      <React.Fragment>{''}</React.Fragment>
                    </React.Fragment>
                  }
                </p.Trans>
              </div>
            ),

            value: args.listHeading1,
          })}
        </div>

        <div
          data-plasmic-name={'coveredList'}
          data-plasmic-override={overrides.coveredList}
          className={classNames(projectcss.all, sty.coveredList)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__dZxrz)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sYgIp,
                  )}
                >
                  <p.Trans>
                    {
                      <React.Fragment>
                        <React.Fragment>{''}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul___5UxC,
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__d89MR,
                              )}
                            >
                              {'W-2 income\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__xzTi,
                              )}
                            >
                              {
                                'Limited interest and dividend income reported on a 1099-INT or 1099-DIV\n'
                              }
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__s3S6W,
                              )}
                            >
                              {'IRS standard deduction\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__gnev2,
                              )}
                            >
                              {'Earned Income Tax Credit (EITC)\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li___2BBz,
                              )}
                            >
                              {'Child tax credits\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li___8GoLt,
                              )}
                            >
                              {'Student loan interest deduction\n'}
                            </li>
                          </ul>
                        }
                        <React.Fragment>{''}</React.Fragment>
                      </React.Fragment>
                    }
                  </p.Trans>
                </div>
              ),

              value: args.list1,
            })}
          </div>
        </div>
      </div>

      <div
        data-plasmic-name={'notCoveredSection'}
        data-plasmic-override={overrides.notCoveredSection}
        className={classNames(projectcss.all, sty.notCoveredSection)}
      >
        <div
          data-plasmic-name={'notCoveredHeading'}
          data-plasmic-override={overrides.notCoveredHeading}
          className={classNames(projectcss.all, sty.notCoveredHeading)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dnYS,
                )}
              >
                <p.Trans>
                  {
                    <React.Fragment>
                      <React.Fragment>{''}</React.Fragment>
                      {
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__r6Mum,
                          )}
                        >
                          {'Situations not covered:'}
                        </h4>
                      }
                      <React.Fragment>{''}</React.Fragment>
                    </React.Fragment>
                  }
                </p.Trans>
              </div>
            ),

            value: args.listHeading2,
          })}
        </div>

        <div
          data-plasmic-name={'notCoveredList'}
          data-plasmic-override={overrides.notCoveredList}
          className={classNames(projectcss.all, sty.notCoveredList)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__xMAby)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__telux,
                  )}
                >
                  <p.Trans>
                    {
                      <React.Fragment>
                        <React.Fragment>{''}</React.Fragment>
                        {
                          <ul
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul__oxUi,
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__zdJvJ,
                              )}
                            >
                              {'Itemized deductions\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__iCKtf,
                              )}
                            >
                              {'Unemployment income reported on a 1099-G\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__rQMrl,
                              )}
                            >
                              {'Business or 1099-NEC income\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__wkyTm,
                              )}
                            >
                              {'Stock sales\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__mtM6J,
                              )}
                            >
                              {'Rental property income\n'}
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__wcqwJ,
                              )}
                            >
                              {
                                'Credits, deductions and income reported on other forms or schedules (for example, income related to crypto investments)\n'
                              }
                            </li>
                          </ul>
                        }
                        <React.Fragment>{''}</React.Fragment>
                      </React.Fragment>
                    }
                  </p.Trans>
                </div>
              ),

              value: args.list2,
            })}
          </div>
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__wuk4C)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sZsOw,
              )}
            >
              <p.Trans>
                {
                  'If you don’t have a simple tax return, we have other paid options to file using TurboTax.'
                }
              </p.Trans>
            </div>
          ),

          value: args.subText,
          className: classNames(sty.slotTargetSubText),
        })}
      </div>

      {true ? (
        <div
          data-plasmic-name={'moneySection'}
          data-plasmic-override={overrides.moneySection}
          className={classNames(projectcss.all, sty.moneySection)}
        >
          <div
            data-plasmic-name={'moneyHeading'}
            data-plasmic-override={overrides.moneyHeading}
            className={classNames(projectcss.all, sty.moneyHeading)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.Trans>{'How does TurboTax make any money?'}</p.Trans>
              ),
              value: args.heading2,
              className: classNames(sty.slotTargetHeading2),
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___0ZnXt)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.Trans>
                  {
                    "We want our customers to love our products and services. Because we have customers who pay for our premium products and services, we can offer simple tax filing. We offer additional paid benefits that go beyond filing your simple taxes for free, but they're optional. "
                  }
                </p.Trans>
              ),
              value: args.headingIntro2,
              className: classNames(sty.slotTargetHeadingIntro2),
            })}
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'title',
    'introPara',
    'coveredSection',
    'coveredHeading',
    'coveredList',
    'notCoveredSection',
    'notCoveredHeading',
    'notCoveredList',
    'moneySection',
    'moneyHeading',
  ],
  title: ['title'],
  introPara: ['introPara'],
  coveredSection: ['coveredSection', 'coveredHeading', 'coveredList'],
  coveredHeading: ['coveredHeading'],
  coveredList: ['coveredList'],
  notCoveredSection: [
    'notCoveredSection',
    'notCoveredHeading',
    'notCoveredList',
  ],
  notCoveredHeading: ['notCoveredHeading'],
  notCoveredList: ['notCoveredList'],
  moneySection: ['moneySection', 'moneyHeading'],
  moneyHeading: ['moneyHeading'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  title: 'h3';
  introPara: 'p';
  coveredSection: 'div';
  coveredHeading: 'div';
  coveredList: 'div';
  notCoveredSection: 'div';
  notCoveredHeading: 'div';
  notCoveredList: 'div';
  moneySection: 'div';
  moneyHeading: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSimpleTaxReturnsModalContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSimpleTaxReturnsModalContent__VariantsArgs;
    args?: PlasmicSimpleTaxReturnsModalContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicSimpleTaxReturnsModalContent__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicSimpleTaxReturnsModalContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSimpleTaxReturnsModalContent__ArgProps,
          internalVariantPropNames:
            PlasmicSimpleTaxReturnsModalContent__VariantProps,
        }),
      [props, nodeName],
    );

    return PlasmicSimpleTaxReturnsModalContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSimpleTaxReturnsModalContent';
  } else {
    func.displayName = `PlasmicSimpleTaxReturnsModalContent.${nodeName}`;
  }
  return func;
}

export const PlasmicSimpleTaxReturnsModalContent = Object.assign(
  // Top-level PlasmicSimpleTaxReturnsModalContent renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent('title'),
    introPara: makeNodeComponent('introPara'),
    coveredSection: makeNodeComponent('coveredSection'),
    coveredHeading: makeNodeComponent('coveredHeading'),
    coveredList: makeNodeComponent('coveredList'),
    notCoveredSection: makeNodeComponent('notCoveredSection'),
    notCoveredHeading: makeNodeComponent('notCoveredHeading'),
    notCoveredList: makeNodeComponent('notCoveredList'),
    moneySection: makeNodeComponent('moneySection'),
    moneyHeading: makeNodeComponent('moneyHeading'),

    // Metadata about props expected for PlasmicSimpleTaxReturnsModalContent
    internalVariantProps: PlasmicSimpleTaxReturnsModalContent__VariantProps,
    internalArgProps: PlasmicSimpleTaxReturnsModalContent__ArgProps,
  },
);

export default PlasmicSimpleTaxReturnsModalContent;
/* prettier-ignore-end */
