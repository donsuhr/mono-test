// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWL5f4gAFbwKhEp4ZCgaRf
// Component: 0SSfeOzJAjJ
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_mar_tech_atoms.module.css'; // plasmic-import: bWL5f4gAFbwKhEp4ZCgaRf/projectcss
import sty from './PlasmicGenericTile.module.css'; // plasmic-import: 0SSfeOzJAjJ/css

import greenCheckCircleCompressedsvgDBulMnH98 from './images/greenCheckCircleCompressedsvg.svg'; // plasmic-import: DBulMnH98/picture
import greenCheckCircleKk7QrZzG64 from './images/greenCheckCircle.svg'; // plasmic-import: kk7QrZzG64/picture
import unemployedCompressedsvgCS4L5QtP from './images/unemployedCompressedsvg.svg'; // plasmic-import: -cS4L5qtP/picture

export type PlasmicGenericTile__VariantMembers = {
  badge: 'red';
  state: 'active';
};
export type PlasmicGenericTile__VariantsArgs = {
  badge?: SingleChoiceArg<'red'>;
  state?: SingleChoiceArg<'active'>;
};
type VariantPropType = keyof PlasmicGenericTile__VariantsArgs;
export const PlasmicGenericTile__VariantProps = new Array<VariantPropType>(
  'badge',
  'state',
);

export type PlasmicGenericTile__ArgsType = {
  text?: React.ReactNode;
  badgeText?: React.ReactNode;
  icon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicGenericTile__ArgsType;
export const PlasmicGenericTile__ArgProps = new Array<ArgPropType>(
  'text',
  'badgeText',
  'icon',
);

export type PlasmicGenericTile__OverridesType = {
  tileWrapper?: p.Flex<'button'>;
  badgeWrapper?: p.Flex<'div'>;
  tileIconAndText?: p.Flex<'div'>;
  checkMarkWrapper?: p.Flex<'div'>;
  img?: p.Flex<'img'>;
  tileIconWrapper?: p.Flex<'div'>;
  tileTextWrapper?: p.Flex<'div'>;
};

export interface DefaultGenericTileProps {
  text?: React.ReactNode;
  badgeText?: React.ReactNode;
  icon?: React.ReactNode;
  badge?: SingleChoiceArg<'red'>;
  state?: SingleChoiceArg<'active'>;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicGenericTile__RenderFunc(props: {
  variants: PlasmicGenericTile__VariantsArgs;
  args: PlasmicGenericTile__ArgsType;
  overrides: PlasmicGenericTile__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'badge',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.badge
          : undefined,
      },
      {
        path: 'state',
        type: 'private',
        variableType: 'variant',
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.state
          : undefined,
      },
    ],
    [$props, $ctx],
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const [isTileWrapperHover, triggerTileWrapperHoverProps] = useTrigger(
    'useHover',
    {},
  );
  const [isTileWrapperNotFocusVisible, triggerTileWrapperNotFocusVisibleProps] =
    useTrigger('useFocusVisible', {
      isTextInput: false,
    });
  const [isTileWrapperFocusVisible, triggerTileWrapperFocusVisibleProps] =
    useTrigger('useFocusVisible', {
      isTextInput: false,
    });
  const triggers = {
    hoverNotFocusVisible_tileWrapper:
      isTileWrapperHover && !isTileWrapperNotFocusVisible,
    focusVisible_tileWrapper: isTileWrapperFocusVisible,
  };

  return (
    <button
      data-plasmic-name={'tileWrapper'}
      data-plasmic-override={overrides.tileWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.tileWrapper,
        {
          [sty.tileWrapper___focusVisible]: triggers.focusVisible_tileWrapper,
          [sty.tileWrapper___hover__notFocusVisible]:
            triggers.hoverNotFocusVisible_tileWrapper,
          [sty.tileWrapperbadge_red]: hasVariant($state, 'badge', 'red'),
          [sty.tileWrapperstate_active]: hasVariant($state, 'state', 'active'),
          [sty.tileWrapperstate_active____focusVisible]:
            hasVariant($state, 'state', 'active') &&
            triggers.focusVisible_tileWrapper,
          [sty.tileWrapperstate_active____hover__notFocusVisible]:
            hasVariant($state, 'state', 'active') &&
            triggers.hoverNotFocusVisible_tileWrapper,
          [sty.tileWrapperstate_active_badge_red]:
            hasVariant($state, 'state', 'active') &&
            hasVariant($state, 'badge', 'red'),
        },
      )}
      ref={(ref) => {
        $refs['tileWrapper'] = ref;
      }}
      data-plasmic-trigger-props={[
        triggerTileWrapperHoverProps,
        triggerTileWrapperNotFocusVisibleProps,
        triggerTileWrapperFocusVisibleProps,
      ]}
    >
      {(hasVariant($state, 'badge', 'red') ? true : false) ? (
        <div
          data-plasmic-name={'badgeWrapper'}
          data-plasmic-override={overrides.badgeWrapper}
          className={classNames(projectcss.all, sty.badgeWrapper, {
            [sty.badgeWrapperbadge_red]: hasVariant($state, 'badge', 'red'),
            [sty.badgeWrapperstate_active_badge_red]:
              hasVariant($state, 'state', 'active') &&
              hasVariant($state, 'badge', 'red'),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kTkTx,
                )}
              >
                <p.Trans>{'NEW!'}</p.Trans>
              </div>
            ),

            value: args.badgeText,
            className: classNames(sty.slotTargetBadgeText, {
              [sty.slotTargetBadgeTextbadge_red]: hasVariant(
                $state,
                'badge',
                'red',
              ),
              [sty.slotTargetBadgeTextstate_active_badge_red]:
                hasVariant($state, 'state', 'active') &&
                hasVariant($state, 'badge', 'red'),
            }),
          })}
        </div>
      ) : null}

      <div
        data-plasmic-name={'tileIconAndText'}
        data-plasmic-override={overrides.tileIconAndText}
        className={classNames(projectcss.all, sty.tileIconAndText, {
          [sty.tileIconAndText___focusVisible]:
            triggers.focusVisible_tileWrapper,
          [sty.tileIconAndText___hover__notFocusVisible]:
            triggers.hoverNotFocusVisible_tileWrapper,
          [sty.tileIconAndTextbadge_red]: hasVariant($state, 'badge', 'red'),
          [sty.tileIconAndTextstate_active]: hasVariant(
            $state,
            'state',
            'active',
          ),
          [sty.tileIconAndTextstate_active____focusVisible]:
            hasVariant($state, 'state', 'active') &&
            triggers.focusVisible_tileWrapper,
          [sty.tileIconAndTextstate_active____hover__notFocusVisible]:
            hasVariant($state, 'state', 'active') &&
            triggers.hoverNotFocusVisible_tileWrapper,
          [sty.tileIconAndTextstate_active_badge_red]:
            hasVariant($state, 'state', 'active') &&
            hasVariant($state, 'badge', 'red'),
        })}
      >
        {(hasVariant($state, 'state', 'active') ? true : false) ? (
          <div
            data-plasmic-name={'checkMarkWrapper'}
            data-plasmic-override={overrides.checkMarkWrapper}
            className={classNames(projectcss.all, sty.checkMarkWrapper, {
              [sty.checkMarkWrapper___hover__notFocusVisible]:
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.checkMarkWrapperbadge_red]: hasVariant(
                $state,
                'badge',
                'red',
              ),
              [sty.checkMarkWrapperstate_active]: hasVariant(
                $state,
                'state',
                'active',
              ),
              [sty.checkMarkWrapperstate_active____focusVisible]:
                hasVariant($state, 'state', 'active') &&
                triggers.focusVisible_tileWrapper,
              [sty.checkMarkWrapperstate_active____hover__notFocusVisible]:
                hasVariant($state, 'state', 'active') &&
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.checkMarkWrapperstate_active_badge_red]:
                hasVariant($state, 'state', 'active') &&
                hasVariant($state, 'badge', 'red'),
            })}
          >
            <img
              data-plasmic-name={'img'}
              data-plasmic-override={overrides.img}
              alt={''}
              className={classNames(projectcss.all, projectcss.img, sty.img, {
                [sty.imgstate_active]: hasVariant($state, 'state', 'active'),
                [sty.imgstate_active____focusVisible]:
                  hasVariant($state, 'state', 'active') &&
                  triggers.focusVisible_tileWrapper,
                [sty.imgstate_active____hover__notFocusVisible]:
                  hasVariant($state, 'state', 'active') &&
                  triggers.hoverNotFocusVisible_tileWrapper,
                [sty.imgstate_active_badge_red]:
                  hasVariant($state, 'state', 'active') &&
                  hasVariant($state, 'badge', 'red'),
              })}
              src={
                hasVariant($state, 'state', 'active')
                  ? greenCheckCircleKk7QrZzG64
                  : greenCheckCircleCompressedsvgDBulMnH98
              }
            />
          </div>
        ) : null}
        {(hasVariant($state, 'state', 'active') ? false : true) ? (
          <div
            data-plasmic-name={'tileIconWrapper'}
            data-plasmic-override={overrides.tileIconWrapper}
            className={classNames(projectcss.all, sty.tileIconWrapper, {
              [sty.tileIconWrapper___focusVisible]:
                triggers.focusVisible_tileWrapper,
              [sty.tileIconWrapper___hover__notFocusVisible]:
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.tileIconWrapperbadge_red]: hasVariant(
                $state,
                'badge',
                'red',
              ),
              [sty.tileIconWrapperstate_active]: hasVariant(
                $state,
                'state',
                'active',
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <img
                  alt={''}
                  className={classNames(
                    projectcss.all,
                    projectcss.img,
                    sty.img__edt5A,
                  )}
                  src={unemployedCompressedsvgCS4L5QtP}
                />
              ),

              value: args.icon,
            })}
          </div>
        ) : null}

        <div
          data-plasmic-name={'tileTextWrapper'}
          data-plasmic-override={overrides.tileTextWrapper}
          className={classNames(projectcss.all, sty.tileTextWrapper, {
            [sty.tileTextWrapper___focusVisible]:
              triggers.focusVisible_tileWrapper,
            [sty.tileTextWrapper___hover__notFocusVisible]:
              triggers.hoverNotFocusVisible_tileWrapper,
            [sty.tileTextWrapperbadge_red]: hasVariant($state, 'badge', 'red'),
            [sty.tileTextWrapperstate_active]: hasVariant(
              $state,
              'state',
              'active',
            ),
            [sty.tileTextWrapperstate_active____focusVisible]:
              hasVariant($state, 'state', 'active') &&
              triggers.focusVisible_tileWrapper,
            [sty.tileTextWrapperstate_active____hover__notFocusVisible]:
              hasVariant($state, 'state', 'active') &&
              triggers.hoverNotFocusVisible_tileWrapper,
            [sty.tileTextWrapperstate_active_badge_red]:
              hasVariant($state, 'state', 'active') &&
              hasVariant($state, 'badge', 'red'),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ptIc,
                )}
              >
                <p.Trans>{'I want a tax expert to do my taxes for me'}</p.Trans>
              </div>
            ),

            value: args.text,
            className: classNames(sty.slotTargetText, {
              [sty.slotTargetText___focusVisible]:
                triggers.focusVisible_tileWrapper,
              [sty.slotTargetText___hover__notFocusVisible]:
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.slotTargetTextstate_active]: hasVariant(
                $state,
                'state',
                'active',
              ),
              [sty.slotTargetTextstate_active____focusVisible]:
                hasVariant($state, 'state', 'active') &&
                triggers.focusVisible_tileWrapper,
              [sty.slotTargetTextstate_active____hover__notFocusVisible]:
                hasVariant($state, 'state', 'active') &&
                triggers.hoverNotFocusVisible_tileWrapper,
              [sty.slotTargetTextstate_active_badge_red]:
                hasVariant($state, 'state', 'active') &&
                hasVariant($state, 'badge', 'red'),
            }),
          })}
        </div>
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tileWrapper: [
    'tileWrapper',
    'badgeWrapper',
    'tileIconAndText',
    'checkMarkWrapper',
    'img',
    'tileIconWrapper',
    'tileTextWrapper',
  ],
  badgeWrapper: ['badgeWrapper'],
  tileIconAndText: [
    'tileIconAndText',
    'checkMarkWrapper',
    'img',
    'tileIconWrapper',
    'tileTextWrapper',
  ],
  checkMarkWrapper: ['checkMarkWrapper', 'img'],
  img: ['img'],
  tileIconWrapper: ['tileIconWrapper'],
  tileTextWrapper: ['tileTextWrapper'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tileWrapper: 'button';
  badgeWrapper: 'div';
  tileIconAndText: 'div';
  checkMarkWrapper: 'div';
  img: 'img';
  tileIconWrapper: 'div';
  tileTextWrapper: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGenericTile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGenericTile__VariantsArgs;
    args?: PlasmicGenericTile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGenericTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGenericTile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGenericTile__ArgProps,
          internalVariantPropNames: PlasmicGenericTile__VariantProps,
        }),
      [props, nodeName],
    );

    return PlasmicGenericTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'tileWrapper') {
    func.displayName = 'PlasmicGenericTile';
  } else {
    func.displayName = `PlasmicGenericTile.${nodeName}`;
  }
  return func;
}

export const PlasmicGenericTile = Object.assign(
  // Top-level PlasmicGenericTile renders the root element
  makeNodeComponent('tileWrapper'),
  {
    // Helper components rendering sub-elements
    badgeWrapper: makeNodeComponent('badgeWrapper'),
    tileIconAndText: makeNodeComponent('tileIconAndText'),
    checkMarkWrapper: makeNodeComponent('checkMarkWrapper'),
    img: makeNodeComponent('img'),
    tileIconWrapper: makeNodeComponent('tileIconWrapper'),
    tileTextWrapper: makeNodeComponent('tileTextWrapper'),

    // Metadata about props expected for PlasmicGenericTile
    internalVariantProps: PlasmicGenericTile__VariantProps,
    internalArgProps: PlasmicGenericTile__ArgProps,
  },
);

export default PlasmicGenericTile;
/* prettier-ignore-end */
